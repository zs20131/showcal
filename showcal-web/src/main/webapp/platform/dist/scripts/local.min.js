var initApp = function () {
    "use strict";
    var ref = [
        "xn.directive.common",
        "xn.filter.common",
        "xn.service.common",
      /*  "xn.service.foundation",*/
        "xn.service.interceptor",
        // 平台keyword,usertag,questionTag,disease等
        "sc.pl.keyword",
        "sc.pl.usertag",
        "sc.pl.questionTag",
        "sc.pl.disease",
        "sc.pl.usermanager",
        "sc.pl.evaluate",
        "sc.pl.integral",
        "sc.pl.repository",
        "sc.pl.sportscheme",
        "sc.pl.sportSetting",
        "sc.pl.food",
        "xn.pl.md",
        "xn.pl.complaint",
        "xn.pl.article",
        "sc.pl.accountmanager",
        "sc.pl.foodCategory",
        "sc.pl.createFood",
        "sc.pl.editFood",
        "sc.pl.password",
        //end
        "xn.platform.filter",
        "xn.platform.service",
        "ui.bootstrap",
        "xn.markdown",
        "xn.directive.navigation",
        "xn.directive.loading",
        "xn.directive.attachment",
        "xn.directive.select",
        "xn.directive.form",
        "ngSanitize"
    ];

    var app = angular.module("xn", ref);

    app.config(["$httpProvider", function ($httpProvider) {
        $httpProvider.interceptors.push("httpInterceptor");
    }]);
// 全局配置 form提交验证
    app.config(["xnValidatorProvider", function (xnValidatorProvider) {
        // 全局配置
        xnValidatorProvider.config({
            blurTrig: false,
            showError: false,
            removeError: false
        });
        xnValidatorProvider.setRules({
            step:{
                required:"请输入运动步骤",
                pattern :"运动步骤必须是数字"
            },
            sportTime:{
                required:"请选择运动时长"
            },
            sportContent:{
                required:"请选择运动内容"
            },
            startBmi:{
                required:"请输入BMI起始值"  ,
                pattern:"请输入整数!"
            },
            endBmi:{
                required:"请输入BMI结束值"  ,
                pattern:"请输入整数!"
            },
            description: {
                required:"内容不能为空",
                minLength: "字数太少！"
            },
            nickName: {
                required: "请输入姓名！"
            },
            mobilePhone:{
                required: "请输入手机号码！",
                pattern:"请输入正确的手机号码!"
            },
            itemName:{
                required: "商品名称不能为空！"
            },
            classId:{
                required: "类别不能为空！"
            },
            itemText:{
                required: "内容不能为空！"
            },
            clazzName:{
                required: "类别不能为空！"
            },
            originalPrice:{
                required: "金额不能为空！",
                pattern :"请输入正确金额"
            },
            sendMessage:{
                required: "系统消息不能为空！"
            },
            burnHeat:{
                required: " 消耗热量不能为空！",
                pattern:"请输入正确的数字"
            },
            volume:{
                required: "体积不能为空！",
                pattern :"请输入正确的整数"
            },
            weight:{
                required: "重量不能为空！",
                pattern :"请输入正确的整数"
            }
        });
    }]);
    app.controller("BodyController", ["$scope", "dialogService", function ($scope, dialogService) {
        //关闭错误
        $scope.closeAlert = function (index,form) {
            form.splice(index,1);
        };
        $scope.$on('navShow', function (event, data) {
            $scope.navShow = data;
        });
        $scope.maxPageSize = 5;

        $scope.platformloginout = function () {
            var dialogDefaults = {
                size: "sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定注销",
                headerText: "继续....?",
                bodyText: "您确定要注销吗？",
                callback: function () {
                window.location.href="/login";
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
    }]);
};
(function () {
    "use strict";
    angular.module("xn.platform.filter", [])
        .filter("userType", [
            function () {
                return function (input) {
                    var type = "";
                    switch (input) {
                        case 'USER':
                            type = "普通会员";
                            break;
                        case 'SHOWCAL':
                            type = "瘦咖";
                            break;
                        case 'PLADMIN':
                            type = "平台管理员";
                            break;
                    }
                    return type;
                };
            }
        ])
        .filter("isRecommend", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case 1:
                            status = "早";
                            break;
                        case 2:
                            status = "中";
                            break;
                        case 3:
                            status = "晚";
                            break;
                    }
                    return status;
                };
            }
        ])
        .filter("integralType", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case "LOGIN":
                            status = "登陆";
                            break;
                        case "USERTC":
                            status = "热控";
                            break;
                        case "QUESTION":
                            status = "提问";
                            break;
                        case "REPLY":
                            status = "评论";
                            break;
                        case "FORWORD":
                            status = "转发";
                            break;
                    }
                    return status;
                };
            }
        ])
        .filter("isActive", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case false:
                            status = "未发布";
                            break;
                        case true:
                            status = "已发布";
                            break;

                    }
                    return status;
                };
            }
        ])
        .filter("intensity", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case 'LOW':
                            status = "低";
                            break;
                        case 'MIDDLE':
                            status = "中";
                            break;
                        case 'HEIGHT':
                            status = "高";
                            break;
                    }
                    return status;
                };
            }
        ])
        .filter("address", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case 'HOME':
                            status = "住所";
                            break;
                        case 'OUTDOORS':
                            status = "户外";
                            break;
                        case 'GYM':
                            status = "健身房";
                            break;
                    }
                    return status;
                };
            }
        ])
        .filter("sportUrlType", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case 'URL':
                            status = "链接";
                            break;
                        case 'PICTURE':
                            status = "图片";
                            break;
                        case 'VIDEO':
                            status = "视频";
                            break;
                        case 'TEXT':
                            status = "文本";
                            break;
                    }
                    return status;
                };
            }
        ]).filter("evaluateType", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case '1':
                            status = "热量";
                            break;
                        case '2':
                            status = "脂肪";
                            break;
                        case '3':
                            status = "蛋白质";
                            break;
                        case '4':
                            status = "碳水";
                            break;
                    }
                    return status;
                };
            }
        ])
        .filter("sexType", [
            function () {
                return function (input) {
                    var type = "未知";
                    switch (input) {
                        case 'FEMALE':
                            type = "女";
                            break;
                        case 'MALE':
                            type = "男";
                            break;
                    }
                    return type;
                };
            }
        ])
        .filter("types", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case '0':
                            status = "评论";
                            break;
                        case '1':
                            status = "建议";
                            break;
                    }
                    return status;
                };
            }
        ])
        .filter("repositoryType", [
            function () {
                return function (input) {
                    var status = "";
                    switch (input) {
                        case 'PLATFORM':
                            status = "系统";
                            break;
                        case 'SHOWCAL':
                            status = "瘦咖";
                            break;
                    }
                    return status;
                };
            }
        ])
        .filter("timeReturnFormat", [
            function () {
                return function (input) {

                    if (input !=undefined ||  input==null) {
                        return;

                    } else {
                        if (input.indexOf(" ") == 10) {
                            var time;
                            time = input.substr(0, 10) + "\r\n" + input.substr(11, 5);
                            return time;
                        } else {
                            input = Number(input);
                            return input ? moment(input).format("YYYY-MM-DD") + "\r\n" + moment(input).format("HH:mm") : "";
                        }
                    }
                };
            }
        ]);
})();
(function () {
    "use strict";
    angular.module("xn.platform.service", [])
        .factory('PlatformService', ['$http', function ($http) {
            var service = {};
            var url = "/platform/api.do";
            service.getSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.get"}});
            };
            service.searchSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.search"}});
            };
            service.findSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.find"}});
            };
            service.createSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.create"}});
            };
            service.updateSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.update"}});
            };
            service.deleteSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.delete"}});
            };
            service.upSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.up"}});
            };
            service.downSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.down"}});
            };
            service.banSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.ban"}});
            };
            service.inbanSysUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysUser.inban"}});
            };
            service.updateUserAvatar = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.userAvatar.update"}
                });
            };
            service.searchBySourceType = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.bySourceType.search"}
                });
            };
            service.inactiveUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.user.inactive"}});
            };
            service.activeUser = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.user.active"}});
            };
            service.findSysUserCurve = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.sysusercurve.find"}});
            };

            service.userExistByMobilePhone = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.existByMobilePhone.user"}
                });
            };
            service.login = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.ogin."}});
            };
            service.isResetableLoginPassword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.resetableLoginPassword.is"}
                });
            };
            service.modifyLoginPassword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.loginPassword.modify"}
                });
            };
            service.modifyLoginPasswordCheck = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.loginPassword.modify.check"}
                });
            };
            service.resetUserLoginPassword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.userLoginPassword.reset"}
                });
            };
            service.createVerificationCode = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.verificationCode.create"}
                });
            };
            service.checkValification = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.valification.check"}
                });
            };
            service.getPassport = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.passport.get"}});
            };
            service.getSettingDiseaseAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDiseaseAllList.get"}
                });
            };
            service.createSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.create"}
                });
            };
            service.updateSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.update"}
                });
            };
            service.deleteSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.delete"}
                });
            };
            service.inactiveSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.inactive"}
                });
            };
            service.activeSettingDisease = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingDisease.active"}
                });
            };
            service.getSettingKeywordAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeywordAllList.get"}
                });
            };
            service.createSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.create"}
                });
            };
            service.updateSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.update"}
                });
            };
            service.deleteSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.delete"}
                });
            };
            service.inactiveSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.inactive"}
                });
            };
            service.activeSettingKeyword = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingKeyword.active"}
                });
            };
            service.getSettingQuestionTagAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTagAllList.get"}
                });
            };
            service.createSettingQuestionTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTag.create"}
                });
            };
            service.updateSettingQuestionTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTag.update"}
                });
            };
            service.deleteSettingQuestionTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTag.delete"}
                });
            };
            service.inactiveSettingQuestionTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingQuestionTag.inactive"}
                });
            };
            service.findSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.find"}
                });
            };
            service.getSettingUserTagAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTagAllList.get"}
                });
            };
            service.createSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.create"}
                });
            };
            service.updateSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.update"}
                });
            };
            service.deleteSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.delete"}
                });
            };
            service.inactiveSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.inactive"}
                });
            };
            service.activeSettingUserTag = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.settingUserTag.active"}
                });
            };
            service.findSysUserCurve = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.sysUserCurve.find"}
                });
            };
            service.getSysUserCurveAllListbyUser = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.sysUserCurveAllListbyUser.get"}
                });
            };
            service.createSysUserCurve = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.sysUserCurve.create"}
                });
            };
            service.deleteSysUserCurve = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.sysUserCurve.delete"}
                });
            };
            service.createIntegralRule = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralRule.create"}
                });
            };
            service.updateIntegralRule = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralRule.update"}
                });
            };
            service.getIntegralRuleAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralRuleAllList.get"}
                });
            };
            service.deleteIntegralRule = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralRule.delete"}
                });
            };
            service.createIntegralDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralDetail.create"}
                });
            };
            service.findIntegralDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralDetail.find"}
                });
            };
            service.getMyIntegralDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.myIntegralDetail.get"}
                });
            };
            service.createSyncSql = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.syncSql.create"}});
            };
            service.getSyncIncrementSql = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.syncIncrementSql.get"}
                });
            };
            service.findCommentPost = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.comment.post.find"}
                });
            };
            service.createCommentPost = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.comment.post.create"}
                });
            };
            service.createListCommentPost = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.comment.post.create.list"}
                });
            };
            service.deleteCommentPost = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.comment.post.delete"}
                });
            };
            service.createMessage = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.message.create"}
                });
            };
            service.findIntegralrule = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralrule.find"}
                });
            };
            service.updateIntegralrule = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.platform.integralrule.update"}
                });
            };
            service.findComment = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.comment.post.find"}});
            };

            service.deleteCommentPostBatch = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.platform.comment.post.delete.batch"}});
            };

            return service;
        }

        ])
        .factory('ThermalControlService', ['$http', function ($http) {
            var service = {};
            var url = "/tc/api.do";
            service.getBaseHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.baseHeat.get"}
                });
            };
            service.findBaseHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.baseHeat.find"}
                });
            };
            service.apiSportHeadTemplate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sport.head.template"}
                });
            };
            service.apiSportSettingTemplate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sport.setting.template"}
                });
            };
            service.createBaseHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.baseHeat.create"}
                });
            };
            service.apiSportHeadImport = function (data) {
                var url = "/api/FileImport.do";
                var fd = new FormData();
                fd.append("file", data);
                fd.append("method", "api.sport.head.import");
                return $http({
                    method: 'POST',
                    url: url,
                    headers: {'Content-Type': undefined},
                    transformRequest: angular.identity,
                    data: fd
                });
            };
            service.updateBaseHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.baseHeat.update"}
                });
            };
            service.deleteBaseHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.baseHeat.delete"}
                });
            };
            service.getBmiFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.bmiFood.get"}
                });
            };
            service.findBmiFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.bmiFood.find"}
                });
            };
            service.createBmiFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.bmiFood.create"}
                });
            };
            service.updateBmiFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.bmiFood.update"}
                });
            };
            service.deleteBmiFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.bmiFood.delete"}
                });
            };
            service.inactiveBmiFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.bmiFood.inactive"}
                });
            };
            service.activeBmiFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.bmiFood.active"}
                });
            };
            service.findEvaluate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.evaluate.find"}
                });
            };
            service.createEvaluate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.evaluate.create"}
                });
            };
            service.updateEvaluate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.evaluate.update"}
                });
            };
            service.findFoodCategory = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodCategory.find"}
                });
            };
            service.getFoodCategoryAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodCategoryAllList.get"}
                });
            };
            service.createFoodCategory = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodCategory.create"}
                });
            };
            service.updateFoodCategory = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodCategory.update"}
                });
            };
            service.deleteFoodCategory = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodCategory.delete"}
                });
            };
            service.findFoodExchange = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodExchange.find"}
                });
            };
            service.getFoodExchangeAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodExchangeAllList.get"}
                });
            };
            service.createFoodExchange = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodExchange.create"}
                });
            };
            service.updateFoodExchange = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodExchange.update"}
                });
            };
            service.deleteFoodExchange = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodExchange.delete"}
                });
            };
            service.inactiveFoodExchange = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodExchange.inactive"}
                });
            };
            service.activeFoodExchange = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.foodExchange.active"}
                });
            };
            service.findFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.food.find"}
                });
            };
            service.createFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.food.create"}
                });
            };
            service.updateFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.food.update"}
                });
            };
            service.getFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.food.get"}
                });
            };
            service.deleteFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.food.delete"}
                });
            };
            service.inactiveFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.food.inactive"}
                });
            };
            service.activeFood = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.food.active"}
                });
            };
            service.apiFoodOutputTemplate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.food.output.template"}
                });
            };
            service.apiSportLineTemplate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sport.line.template"}
                });
            };

            service.apiFoodImport = function (file) {
                var fd = new FormData();
                fd.append("file",file);
                fd.append("method", "api.thermalcontrol.food.import");
                return $http({
                    method : 'POST',
                    url : "/api/FileImport.do",
                    headers: {'Content-Type': undefined },
                    transformRequest: angular.identity,
                    data: fd
                });
            };
            service.apiSportSettingImport = function (file) {
                var fd = new FormData();
                fd.append("file",file);
                fd.append("method", "api.thermalcontrol.sport.setting.import");
                return $http({
                    method : 'POST',
                    url : "/api/FileImport.do",
                    headers: {'Content-Type': undefined },
                    transformRequest: angular.identity,
                    data: fd
                });
            };
            service.apiSportLineImport = function (file) {
                var fd = new FormData();
                fd.append("file",file);
                fd.append("method", "api.thermalcontrol.sport.line.import");
                return $http({
                    method : 'POST',
                    url : "/api/FileImport.do",
                    headers: {'Content-Type': undefined },
                    transformRequest: angular.identity,
                    data: fd
                });
            };
            service.getGradeWeight = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.gradeWeight.get"}
                });
            };
            service.searchGradeWeight = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.gradeWeight.search"}
                });
            };
            service.findGradeWeight = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.gradeWeight.find"}
                });
            };
            service.getGradeWeightAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.gradeWeightAllList.get"}
                });
            };
            service.createGradeWeight = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.gradeWeight.create"}
                });
            };
            service.updateGradeWeight = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.gradeWeight.update"}
                });
            };
            service.deleteGradeWeight = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.gradeWeight.delete"}
                });
            };
            service.getMeals = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.meals.get"}
                });
            };
            service.findMeals = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.meals.find"}
                });
            };
            service.createMeals = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.meals.create"}
                });
            };
            service.updateMeals = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.meals.update"}
                });
            };
            service.deleteMeals = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.meals.delete"}
                });
            };
            service.getNutritionalGoal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.nutritionalGoal.get"}
                });
            };
            service.searchNutritionalGoal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.nutritionalGoal.search"}
                });
            };
            service.findNutritionalGoal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.nutritionalGoal.find"}
                });
            };
            service.createNutritionalGoal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.nutritionalGoal.create"}
                });
            };
            service.updateNutritionalGoal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.nutritionalGoal.update"}
                });
            };
            service.deleteNutritionalGoal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.nutritionalGoal.delete"}
                });
            };
            service.inactiveNutritionalGoal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.nutritionalGoal.inactive"}
                });
            };
            service.activeNutritionalGoal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.nutritionalGoal.active"}
                });
            };
            service.getSportHead = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportHead.get"}
                });
            };
            service.findSportHead = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportHead.find"}
                });
            };
            service.createSportHead = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportHead.create"}
                });
            };
            service.updateSportHead = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportHead.update"}
                });
            };
            service.updateSportHeadTotalTime = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportHead.updateTotalTime"}
                });
            };
            service.deleteSportHead = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportHead.delete"}
                });
            };
            service.getSportLineAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportLineAllList.get"}
                });
            };
            service.createSportLine = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportLine.create"}
                });
            };
            service.updateSportLine = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportLine.update"}
                });
            };
            service.deleteSportLine = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportLine.delete"}
                });
            };
            service.getSportSetting = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportSetting.get"}
                });
            };
            service.searchSportSetting = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportSetting.search"}
                });
            };
            service.findSportSetting = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportSetting.find"}
                });
            };
            service.getSportSettingAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportSettingAllList.get"}
                });
            };
            service.createSportSetting = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportSetting.create"}
                });
            };
            service.updateSportSetting = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportSetting.update"}
                });
            };
            service.deleteSportSetting = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.sportSetting.delete"}
                });
            };
            service.getSyncHeatDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeatDetail.get"}
                });
            };
            service.searchSyncHeatDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeatDetail.search"}
                });
            };
            service.findSyncHeatDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeatDetail.find"}
                });
            };
            service.getSyncHeatDetailAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeatDetailAllList.get"}
                });
            };
            service.createSyncHeatDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeatDetail.create"}
                });
            };
            service.updateSyncHeatDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeatDetail.update"}
                });
            };
            service.deleteSyncHeatDetail = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeatDetail.delete"}
                });
            };
            service.getSyncHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeat.get"}
                });
            };
            service.searchSyncHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeat.search"}
                });
            };
            service.findSyncHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeat.find"}
                });
            };
            service.getSyncHeatAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeatAllList.get"}
                });
            };
            service.createSyncHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeat.create"}
                });
            };
            service.updateSyncHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeat.update"}
                });
            };
            service.deleteSyncHeat = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncHeat.delete"}
                });
            };
            service.getSyncSport = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncSport.get"}
                });
            };
            service.searchSyncSport = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncSport.search"}
                });
            };
            service.findSyncSport = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncSport.find"}
                });
            };
            service.getSyncSportAllList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncSportAllList.get"}
                });
            };
            service.createSyncSport = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncSport.create"}
                });
            };
            service.updateSyncSport = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncSport.update"}
                });
            };
            service.deleteSyncSport = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.thermalcontrol.syncSport.delete"}
                });
            };
            return service;
        }])
        .factory('ServiceService', ['$http', function ($http) {
            var service = {};
            var url = "/service/api.do";
            service.createWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.create"}});
            };
            service.updateWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.update"}});
            };
            service.deleteWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.delete"}});
            };
            service.inactiveWelcome = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.welcome.inactive"}
                });
            };
            service.activeWelcome = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.welcome.active"}});
            };
            service.getMyWelComeList = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myWelComeList.get"}
                });
            };
            service.getMyShowCalWelCome = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myShowCalWelCome.get"}
                });
            };
            service.createServiceUser = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.serviceUser.create"}
                });
            };
            service.deleteServiceUser = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.serviceUser.delete"}
                });
            };
            service.getMyServiceUser = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myServiceUser.get"}
                });
            };
            service.getMyHistoryServiceUser = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myHistoryServiceUser.get"}
                });
            };
            service.getMyShowCal = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.myShowCal.get"}});
            };
            service.getMyHistoryShowCal = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myHistoryShowCal.get"}
                });
            };
            service.findRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.find"}});
            };
            service.createRepository = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.repository.create"}
                });
            };
            service.updateRepository = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.repository.update"}
                });
            };
            service.deleteRepository = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.repository.delete"}
                });
            };
            service.activeRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.active"}});
            };
            service.inactiveRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.inactive"}});
            };
            service.toPlatformRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.to.platform"}});
            };
            service.toShowcalRepository = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.repository.to.showcal"}});
            };
            service.getMyRepository = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myRepository.get"}
                });
            };
            service.transferMyRepository = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myRepository.transfer"}
                });
            };
            service.apiRepositoryOutputTemplate = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.repository.output.template"}
                });
            };
            service.apiRepositoryImport = function (file) {
                var fd = new FormData();
                fd.append("file",file);
                fd.append("method", "api.service.repository.import");
                return $http({
                    method : 'POST',
                    url : "/api/FileImport.do",
                    headers: {'Content-Type': undefined },
                    transformRequest: angular.identity,
                    data: fd
                });
            };
            service.sendQuestion = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.question.send"}});
            };
            service.getMyAskHistoryQuestion = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myAskHistoryQuestion.get"}
                });
            };
            service.getMyWillAnswerQuestion = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myWillAnswerQuestion.get"}
                });
            };
            service.getMyHistoryMessage = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.myHistoryMessage.get"}
                });
            };
            service.sendAnswer = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.answer.send"}});
            };
            service.closeQuestions = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.questions.close"}});
            };
            service.findComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.find"}});
            };
            service.createComplatint = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.complatint.create"}
                });
            };
            service.updateComplatint = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.complatint.update"}
                });
            };
            service.deleteComplatint = function (data) {
                return $http({
                    method: 'POST',
                    url: url,
                    data: data,
                    params: {"method": "api.service.complatint.delete"}
                });
            };
            service.getComplatint = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.service.complatint.get"}});
            };
            return service;
        }])
        .factory('CmsService', ['$http', function ($http) {
            var service = {};
            var url = "/cms/api.do";
            service.findArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.find"}});
            };
            service.getArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.get"}});
            };
            service.updateArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.update"}});
            };
            service.deleteArticle = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.cms.article.delete"}});
            };
            return service;
        }])
        .factory('MdService', ['$http', function ($http) {
            var service = {};
            var url = "/md/api.do";
            service.findItem = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.item.find"}});
            };
            service.createItem = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.item.create"}});
            };
            service.getItem = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.item.get"}});
            };
            service.deleteItem = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.item.delete"}});
            };
            service.updateItem = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.item.update"}});
            };
            service.approveItem = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.item.approve"}});
            };
            service.cancelItem = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.item.cancel"}});
            };
            service.createCategory = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.clazz.create.list"}});
            };
            service.changeSort = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.item.sort"}});
            };
            service.findCategory = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.clazz.find"}});
            };
            service.deleteCategory = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.clazz.delete"}});
            };
            service.updateCategory = function (data) {
                return $http({method: 'POST', url: url, data: data, params: {"method": "api.md.clazz.update"}});
            };
            return service;
        }])
    ;
})();
/**
 * Created by xiniu on 9/24 0024.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.accountmanager", []);
    app.controller("AccountManagerIndexController", ["$scope","$modal", "$http", "PlatformService", "dialogService",
        function ($scope,$modal, $http, PlatformService, dialogService) {
            $scope.$emit('navShow', 4);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                sourceTypes: ["REGISTER", "PLATFORM"]
            };
            $scope.pagedResult = [];

            $scope.checkboxlist = [
                {key:"BANNED", value:"禁言", state:false},
                {key:"BLOCK", value:"封锁", state:false},
                {key:"NORMAL", value:"正常", state:false}
            ];

            /**
             * 搜索用户列表
             */
            $scope.getList = function () {
                PlatformService.findSysUser($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.pagedResult = data.result;
                        console.log($scope);
                        $scope.vm.totalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip([{"message":msg }],null,400);
                    }
                });
            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;
                if($scope.vm.statusObj){
                    $scope.vm.status = [];
                    for(var i = 0 ; i < $scope.vm.statusObj.list.length; i++){
                        $scope.vm.status.push($scope.vm.statusObj.list[i].key);
                    }
                }
                $scope.getList();
            };
            $scope.doSearch();

            /**
             *  禁言用户
             * @param id
             */
            $scope.ban = function(id){
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "openBan.html",
                    controller:OpenBan,
                    size:"",
                    resolve: {
                        items: function () {
                            return {
                                title: '禁言',
                                userId: id
                            }
                        }
                    }
                });
                modalInstance.result.then(function (data){
                    window.location.reload();
                });
            };

            /**
             * 取消封锁
             * @param id
             */
            $scope.inBan = function(id){
                PlatformService.inbanSysUser({id:id}).success(function(data){
                    if(data.errors === null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        dialogService.tip([{"message":"解除禁言成功！" }],"/platform/daily/accountmanager");
                    }
                });
            };

            /**
             * 解除封锁
             * @param id
             */
            $scope.doActive = function(id){
                PlatformService.activeUser({id:id}).success(function(data){
                    if(data.errors === null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        dialogService.tip([{"message":"解除封锁成功！" }],"/platform/daily/accountmanager");
                    }
                });
            };

            /**
             * 封锁
             * @param id
             */
            $scope.doInActive = function(id){
                PlatformService.inactiveUser({id:id}).success(function(data){
                    if(data.errors === null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        dialogService.tip([{"message":"封锁成功！" }],"/platform/daily/accountmanager");
                    }
                });
            };

            /**
             * 重置密码
             * @param id
             */
            $scope.doResetPassword = function(id){
                PlatformService.resetUserLoginPassword({id:id}).success(function(data){
                    if(data.errors === null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        dialogService.tip([{"message":"重置密码成功！" }],"/platform/daily/accountmanager");
                    }
                });
            };
        }
    ]);

    /**
     * 禁言维护弹出框控制器
     * @author zxl
     * @type {*[]}
     */
    var OpenBan = ["$scope","$modalInstance","items","dialogService","PlatformService","FoundationService", function ($scope,$modalInstance,items,dialogService,PlatformService,FoundationService) {
        $scope.window = {};
        $scope.window.title = items.title;

        $scope.cancel = function () {
            $scope.window = {};
            $modalInstance.dismiss('cancel');
        };

        $scope.vm = {

        };

        // 根据ID查询用户
        PlatformService.getSysUser({id:items.userId}).success(function(data){
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors);
            } else {
                $scope.vm = data.sysUser;
            }
        });

        // 禁言
        $scope.doBan = function(){
            PlatformService.banSysUser($scope.vm).success(function(data){
                if (data.errors == null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }
                else {
                    dialogService.tip([{message: "禁言成功"}]);
                    //关闭
                    $modalInstance.close($scope.window);
                    //清空数据
                    $scope.window={};
                }
            });
        };
    }];

    //创建用户
    app.controller("UserManagerCreateController", ["$scope", "$http", "PlatformService","FoundationService", "dialogService",
        function ($scope, $http, PlatformService,FoundationService,dialogService) {
            $scope.user = {sex: 'MALE'};
            $scope.userTypes = [
                {name: '普通用户', id: 'USER'},
                {name: '瘦咖', id: 'SHOWCAL'},
                {name: '平台管理员', id: 'PLADMIN'}
            ];
            //弹出式日历触发函数
            $scope.openData = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.openedDate = true;
            };
            /**
             *图片保存的功能
             */
            $scope.showPicture=function(){
                var fileId=document.getElementById("pictureFile");
                fileId.onchange=function(){
                    var fileList = document.getElementById("pictureFile").files;
                    var file = fileList[0];
                    var fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    //头像上传
                    FoundationService.uploadLogo(file).success(function(data){
                        if(data.errors === null || data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            $scope.user.avatarurl = data.url;
                            $scope.user.avatarId = data.id;
                        }
                    });
                };
            };


            $scope.doSave = function () {
                console.log($scope.user);
                if($scope.user.birthday instanceof  Date){
                    $scope.user.birthday = $scope.user.birthday.format('yyyy-MM-dd');
                }
                PlatformService.createSysUser($scope.user).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message":"用户创建成功！" }],"/platform/daily/usermanager");
                    }
                })
            }
        }
    ]);
})();
(function () {
    "use strict";
    // 文章首页控制器
    var articleManageIndexController = function ($scope, dialogService, $modal, toolsService, $location, CmsService,PlatformService) {
        //显示不同的导航NAV的数值
        $scope.$emit('nav', 2);
        //每个导航对应的图标的高亮
        $scope.$emit('navShow', 4);
        $scope.articles = [];
        $scope.vm = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };
        //弹出式日历触发函数
        $scope.openStart = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.startDate = true;
        };
        //弹出式日历触发函数
        $scope.openEnd = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.endDate = true;
        };
        $scope.getList = function () {
            if ($scope.vm.startDate instanceof Date) {
                $scope.vm.approveStartTime = $scope.vm.startDate.format("yyyy-MM-dd");
            }
            if ($scope.vm.endDate instanceof Date) {
                $scope.vm.approveEndTime = $scope.vm.endDate.format("yyyy-MM-dd");
            }
            CmsService.findArticle($scope.vm).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.articles = data.result;
                    for(var i=0;i<data.result.length;i++){
                        if(data.result[i].countComment==null){
                            data.result[i].countComment=0;
                        }
                        if(data.result[i].countLink==null){
                            data.result[i].countLink=0;
                        }
                        if(data.result[i].countRead==null){
                            data.result[i].countRead=0;
                        }
                        if(data.result[i].weight==null){
                            data.result[i].weight=0;
                        }
                        $scope.articles[i].weigthScores= (data.result[i].countComment*5+data.result[i].countLink*2+data.result[i].countRead)*data.result[i].weight;
                        $scope.articles[i].edit = true;
                    }
                    $scope.vm.totalCount = data.totalCount;
                }
            });
        };
        $scope.edit = function (index) {
            $scope.articles[index].edit = false;
        };
        $scope.getList();
        $scope.doFind = function () {
            $scope.getList();
        };
        $scope.doDelete = function (article) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除此帖子吗？",
                callback: function () {
                    CmsService.deleteArticle({id: article.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "删除成功"}], null);
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.doSuccess = function (article) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定升级",
                headerText: "继续....?",
                bodyText: "您确定要升级为成功案例吗？",
                callback: function () {
                    CmsService.successArticle({id: article.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "升级成功"}], null);
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.doUnSuccess = function (article) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定撤销",
                headerText: "继续....?",
                bodyText: "您确定要撤销成功案例吗？",
                callback: function () {
                    CmsService.unsuccessArticle({id: article.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "撤销成功"}], null);
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.approve = function (article) {
            var dialogDefaults = {
                size: "sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定发布",
                headerText: "继续....?",
                bodyText: "您确定要发布吗？",
                callback: function () {
                    CmsService.approveArticle({id: article.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "发布成功"}], null);
                            //$scope.articles[$scope.articles.indexOf(article)].isApproved=true;
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.create = function () {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "create.html",
                size: "lg",
                controller: CreateController
            });
            modalInstance.result.then(function (article) {
                $scope.getList();
            })
        };
        $scope.check = function (article) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "check.html",
                size: "lg",
                resolve: {
                    article: function () {
                        return article;
                    }
                },
                controller: CheckController
            });
            modalInstance.result.then(function (article1) {
                $scope.articles[$scope.articles.indexOf(article)] = article1;
            })
        };
        $scope.orderlink=false;
        $scope.orderCollection=false;
        $scope.orderComment=false;
        $scope.order=function(name,desc){
            $scope.vm.orderSort=name;
            $scope.vm.orderRule=desc;
            if(name=='COUNT_LINK'){
                if(desc=='DESC'){
                    $scope.orderlink=false;
                }
                if(desc=='ASC'){
                    $scope.orderlink=true;
                }

            } if(name=='COUNT_COMMENT'){
                if(desc=='DESC'){
                    $scope.orderComment=false;
                }
                if(desc=='ASC'){
                    $scope.orderComment=true;
                }
            }
            if(name=='COUNT_CONNECTION'){
                if(desc=='DESC'){
                    $scope.orderCollection=false;
                }
                if(desc=='ASC'){
                    $scope.orderCollection=true;
                }
            }
            $scope.getList();
        };
        $scope.save = function (article, index) {
            CmsService.updateArticle(article).success(function (data) {
                if (null == data.errors || 0 < data.errors.length) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.articles[index].edit = true;
                    $scope.getList();
                }
            })
        };
        //管理所有评论
        $scope.checkComment = function (article) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "checkCommentPost.html",
                size: "lg",
                resolve: {
                    article: function () {
                        return article;
                    }
                },
                controller: CheckCommentpostController
            });
        };
    };
    var CheckController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, CmsService,article) {
        $scope.article={};
        CmsService.getArticle({id:article.id}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.article=data.article;
            }
        });

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };
    var CheckCommentpostController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, PlatformService,article) {
        $scope.comments = [];
        $scope.commentPost = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0,
            threadId: article.id
        };
        $scope.getListComment = function () {
            PlatformService.findCommentPost($scope.commentPost).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.comments = data.result;
                    $scope.commentPost.totalCount=data.totalCount;
                }

            });
        };
        $scope.getListComment();
        $scope.doDelete = function (comment) {
            PlatformService.deleteCommentPost({id: comment.id}).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.comments.splice($scope.comments.indexOf(comment), 1);
                }
            });
        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };
    angular.module("xn.pl.article", [])
        .controller("ArticleManageIndexController", ["$scope", "dialogService", "$modal", "toolsService", "$location", "CmsService","PlatformService", articleManageIndexController])
})();
(function () {
    "use strict";
    // 文章首页控制器
    var complaintIndexController = function ($scope, dialogService, $modal, toolsService, $location, ServiceService) {
        //显示不同的导航NAV的数值
        $scope.$emit('nav', 2);
        //每个导航对应的图标的高亮
        $scope.$emit('navShow', 4);
        $scope.complaints = [];
        $scope.vm = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0,
            isList:true
        };
        $scope.getList = function () {
            ServiceService.findComplatint($scope.vm).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.complaints = data.result;
                    $scope.vm.totalCount = data.totalCount;
                }
            });
        };
        $scope.getList();
        $scope.doFind = function () {
            $scope.getList();
        };
        $scope.show = function (id) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "check.html",
                size: "lg",
                resolve: {
                    id: function () {
                        return id;
                    }
                },
                controller: CheckController
            });
            modalInstance.result.then(function (article1) {
                $scope.articles[$scope.articles.indexOf(article)] = article1;
            })
        };
        $scope.doDelete = function (complaint) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除此举报吗？",
                callback: function () {
                    ServiceService.deleteComplatint({id: complaint.sourceId}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "删除成功"}], null);
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.prohibit = function (complaint) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "prohibit.html",
                size: "lg",
                resolve: {
                    complaint: function () {
                        return complaint;
                    }
                },
                controller: ProhibitController
            });
            modalInstance.result.then(function (complaint1) {
                $scope.getList();
            })
        };
        $scope.clearProhibit = function (complaint) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定解禁",
                headerText: "继续....?",
                bodyText: "您确定要解禁吗？",
                callback: function () {
                    $scope.complaint=complaint;
                    $scope.complaint.clearProhibit=true;
                    ServiceService.updateComplatint( $scope.complaint).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors, null, null);
                        } else {
                            dialogService.tip([{"message": "解禁成功！"}],null);
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.clearSocked = function (complaint) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定解锁",
                headerText: "继续....?",
                bodyText: "您确定要解锁吗？",
                callback: function () {
                    $scope.complaint=complaint;
                    $scope.complaint.clearSocked=true;
                    ServiceService.updateComplatint( $scope.complaint).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors, null, null);
                        } else {
                            dialogService.tip([{"message": "解锁成功！"}],null);
                            $scope.getList();
                        }
                    });

                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);

        };
        $scope.socked = function (complaint) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定封锁",
                headerText: "继续....?",
                bodyText: "您确定要封锁吗？",
                callback: function () {
                    $scope.complaint=complaint;
                    $scope.complaint.socked=true;
                    ServiceService.updateComplatint( $scope.complaint).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors, null, null);
                        } else {
                            dialogService.tip([{"message": "封锁成功！"}],null);
                            $scope.getList();
                        }
                    });

                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);

        };

    };
    var ProhibitController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, ServiceService,complaint) {
        $scope.complaint=complaint;
        //弹出式日历触发函数
        $scope.openStart = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.startDate = true;
        };
        $scope.sure = function () {
            $scope.complaint.prohibit=true;
            if ($scope.complaint.prohibitTime instanceof Date) {
                $scope.complaint.prohibitTime = $scope.complaint.prohibitTime.format("yyyy-MM-dd");
            }
            ServiceService.updateComplatint($scope.complaint).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "禁言成功！"}],null);
                    $modalInstance.close($scope.complaint);
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };
    var CheckController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, CmsService,id) {
        $scope.article={};
        CmsService.getArticle({id:id}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.article=data.article;
            }
        });

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };
    angular.module("xn.pl.complaint", [])
        .controller("ComplaintIndexController", ["$scope", "dialogService", "$modal", "toolsService", "$location", "ServiceService", complaintIndexController])
})
();
/**
 * Created by xiniu on 9/24 0024.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.createFood", []);
    app.controller("CreateFoodIndexController", ["$scope", "$http", "FoundationService","ThermalControlService", "dialogService",
        function ($scope, $http,FoundationService,ThermalControlService, dialogService) {
            $scope.createFoodResult = [];
            $scope.$emit('navShow', 3);
            $scope.food={};
            var thisParameter={};
            ThermalControlService.getFoodCategoryAllList(thisParameter).success(function(data){
                if(data.errors === null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }else{
                    $scope.foodCategoryList = data.result;
                }
            });
            $scope.attachmentRequest = {};
            $scope.newId = {};
            $scope.attachment = {
                businessType: "EMPLOYEE",
                businessCategory: "COMMON",
                list: []
            };
            /* 用于存放附件的ID */
            $scope.attachmentRequest = {ids: []};
            for (var i = 0; i < $scope.attachment.list.length; i++) {
                $scope.attachmentRequest.ids.push($scope.attachment.list[i].id);
            }
            FoundationService.apiFoundationIdGet().success(function (data) {
                if (null == data.errors || 0 < data.errors.length)
                    dialogService.tip(data.errors);
                else {
                    $scope.newId = data.id;
                    $scope.attachment.businessId=$scope.newId;
                }
            });
            /**
             *图片保存的功能
             */
            $scope.showPicture = function () {
                var fileId = document.getElementById("pictureFile");
                fileId.onchange = function () {
                    var fileList = document.getElementById("pictureFile").files;
                    var file = fileList[0];
                    var fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    //头像上传
                    FoundationService.uploadLogo(file).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            $scope.food.pictureUrl = data.url;
                            console.log(  $scope.food.pictureUrl);
                        }
                    });
                };
            };
            $scope.doSave = function() {
               // $scope.food = foodItem;
                $scope.food.isActive = true;
                $scope.food.id = $scope.newId;
                ThermalControlService.createFood($scope.food).success(function(data){
                    if(data.errors === null ||
                        data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        //返回id
                        $scope.food.id = data.id;
                        dialogService.tip([{"message": "保存成功！"}],"/platform/food/food");
                        /*//清空数据
                        $scope.food={};
                        window.location.reload();*/
                    }
                }) ;
            };



        }
    ]);
    //创建食物
   /* app.controller("CreateFoodIndexController", ["$scope", "$http","ThermalControlService","dialogService",
        function ($scope, $http, ThermalControlService,dialogService) {



            /!**
             *图片保存的功能
             *!/
            /!*   $scope.showPicture=function(){
             var fileId=document.getElementById("pictureFile");
             fileId.onchange=function(){
             var fileList = document.getElementById("pictureFile").files;
             var file = fileList[0];
             var fileReader = new FileReader();
             fileReader.readAsDataURL(file);
             //头像上传
             ThermalControlService.uploadLogo(file).success(function(data){
             if(data.errors === null || data.errors.length > 0){
             dialogService.tip(data.errors);
             }else{
             $scope.user.avatarurl = data.url;
             $scope.user.avatarId = data.id;
             }
             });
             };
             };*!/


            /!*   $scope.doSave = function () {
             console.log($scope.user);
             if($scope.user.birthday instanceof  Date){
             $scope.user.birthday = $scope.user.birthday.format('yyyy-MM-dd');
             }
             ThermalControlService.createSysUser($scope.user).success(function (data) {
             if (data.errors === null || data.errors.length > 0) {
             dialogService.tip(data.errors);
             } else {
             dialogService.tip([{"message":"食物创建成功！" }],"/platform/food");
             }
             })
             }*!/
        }
    ]);*/
})();
/**
 * Created by Administrator on 2015/9/22.
 */
(function () {
    "use strict";
    var app= angular.module("sc.pl.disease",[]);
    //index
    app.controller("DiseaseIndexController",["$scope", "$http","$modal","PlatformService","dialogService",
        function ($scope, $http,$modal,PlatformService,dialogService) {
            $scope.$emit('navShow',1);
            //绑定页面的树
            $scope.trees=[];

            //整个树
            $scope.allTrees=[];

            $scope.collapsed=false;

            var parameter = {questiontag:''};
            $scope.search = function(){
                PlatformService.getSettingDiseaseAllList(parameter).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.diseasetags = data.result;
                        $scope.diseasetags.totalCount = data.totalCount;
                    }
                });
            }
            $scope.search();
            /**
             * 递归查找下一级
             * @param pid  父级id
             * @param keywordList   查找的数组
             * @param level     层级数
             */
            var getChild = function(pid,diseaseList,level){
                level ++;
                angular.forEach(diseaseList,function(disease){
                    if(disease.parentId === pid){
                        disease.level = level;
                        disease.visable=false;
                        $scope.allTrees.push(disease);
                        getChild(disease.id,diseaseList,level);
                    }
                });
            };
            var getParent = function(pId,diseaseList){
                angular.forEach($scope.allTrees,function(disease){
                    if(disease.id === pId){
                        diseaseList.push(disease);
                        getParent(disease.parentId,diseaseList);
                    }
                });
            };

            var countChild = function(pid,diseaseList){
                angular.forEach($scope.allTrees,function(disease){
                    if(disease.parentId === pid){
                        diseaseList.push(disease);
                        countChild(disease.id,diseaseList);
                    }
                });
            };
            var parameter = {disease:''};
            PlatformService.getSettingDiseaseAllList(parameter).success(function(data){

                if(data.errors === null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }else{
                    //组建新的树
                    if(data.result.length > 0){
                        var parentIndex=0;
                        angular.forEach(data.result,function(organization){
                            if(organization.parentId ==null){
                                if(parentIndex%2==0){
                                    organization.color="color-blue";
                                }else{
                                    organization.color="color-yellow";
                                }
                                parentIndex++;
                                organization.level = 0;
                                organization.visable=true;
                                $scope.allTrees.push(organization);
                                getChild(organization.id,data.result,0);
                            }
                        });

                        //新建状态及是否有子栏目
                        for( var i=0; i< $scope.allTrees.length-1;i++){
                            if($scope.allTrees[i].id == $scope.allTrees[i+1].parentId){
                                $scope.allTrees[i].childState=true;
                                $scope.allTrees[i].collapsed=true;
                            }else{
                                $scope.allTrees[i].childState=false;
                                $scope.allTrees[i].collapsed=false;
                            }
                        }
                        $scope.allTrees[$scope.allTrees.length-1].childState=false;
                        angular.extend($scope.trees,$scope.allTrees);
                    }
                }
            });

            $scope.collapseTree = function(tree,parent){
                angular.forEach(tree,function(organization) {
                    if(organization.parentId === parent.id){
                        organization.visable = (!parent.collapsed && parent.visable);
                        $scope.collapseTree(tree,organization);
                    }
                });
            };
            $scope.toggle = function(i) {
                $scope.trees[i].collapsed=! $scope.trees[i].collapsed;
                $scope.collapseTree($scope.trees,$scope.trees[i]);

            };
            //停用
            $scope.stop = function(tree) {
                $scope.disease={};
                //复制
                angular.extend($scope.disease ,tree);
                $scope.disease.isActive = false;
                //新建
                PlatformService.updateSettingDisease($scope.disease).success(function(data){
                    if(data.errors === null ||
                        data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        //返回id
                        $scope.disease.id = data.id;
                        dialogService.tip([{"message": "停用成功！"}]);
                        //关闭
                        //$modalInstance.close($scope.disease);
                        //清空数据
                        $scope.disease={};
                         window.location.reload();
                    }
                }) ;
            };

            //启用
            $scope.start = function(tree) {
                $scope.disease={};
                //复制
                angular.extend($scope.disease ,tree);
                $scope.disease.isActive = true;
                //新建
                PlatformService.updateSettingDisease($scope.disease).success(function(data){
                    if(data.errors === null ||
                        data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        //返回id
                        $scope.disease.id = data.id;
                        dialogService.tip([{"message": "启用成功！"}]);
                        //关闭
                       // $modalInstance.close($scope.disease);
                        //清空数据
                        $scope.disease={};
                        window.location.reload();
                    }
                }) ;
            };


            //删除树
            $scope.delete = function(tree) {
                var dialogDefaults = {
                    size:"sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除该情况吗？",
                    type:"delete",
                    callback: function () {
                        PlatformService.deleteSettingDisease({id:tree.id}).success(function(data){
                            if(data.errors === null || data.errors.length > 0){
                                dialogService.tip(data.errors);
                            }else{
                                /**
                                 * 获取树的值在数组中的位置
                                 * @param data 当前数据
                                 * @returns {number} 返回位置
                                 */
                                var location = function(data,dataList){
                                    for(var i=0; i < dataList.length; i++){
                                        if(dataList[i].id===data.id){
                                            return  i;
                                        }
                                    }
                                };

                                /**
                                 * 查找兄弟的个数
                                 * @param data       当前数据
                                 * @param dataList    查询的数组
                                 * @returns {number}  返回兄弟和自己的个数
                                 */

                                var brothers = function(data,dataList){
                                    var number = 0;
                                    for(var i=0; i < dataList.length; i++){
                                        if(dataList[i].parentId===data.parentId){
                                            number++;
                                        }
                                    }
                                    return number;
                                };

                                /**
                                 * 查找父级别位置
                                 * @param data
                                 * @param dataList
                                 * @returns {number}
                                 */

                                var locationParent = function(data,dataList){
                                    for(var i=0; i < dataList.length; i++){
                                        if(dataList[i].id ===data.parentId){
                                            return i;
                                        }
                                    }
                                };
                                if( brothers(tree,$scope.trees)===1){
                                    if(locationParent(tree,$scope.trees)!=null){
                                        $scope.trees[locationParent(tree,$scope.trees)].childState = false;
                                    }
                                }

                                if( brothers(tree,$scope.allTrees)===1){
                                    if(locationParent(tree,$scope.allTrees)!=null){
                                        $scope.allTrees[locationParent(tree,$scope.allTrees)].childState = false;
                                    }
                                }

                                $scope.trees.splice(location(tree,$scope.trees),1);
                                $scope.allTrees.splice(location(tree,$scope.allTrees),1);

                                var parentIndex=0;
                                angular.forEach($scope.trees,function(tree){
                                    if(tree.level == 0){
                                        if(parentIndex%2==0){
                                            tree.color="color-blue";
                                        }else{
                                            tree.color="color-yellow";
                                        }
                                        parentIndex++;
                                    }
                                });
                                dialogService.tip([{"message":"删除成功！" }]);
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);

            };



            //树编辑
            $scope.edit = function (tree) {
                $scope.disease={};
                //复制
                angular.extend($scope.disease ,tree);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "treeEidt.html",
                    controller:TreeEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.disease;
                        }
                    }
                });
                modalInstance.result.then(function (data){

                    window.location.reload();

                    /**
                     * 获取树的值在数组中的位置
                     * @param data 当前数据
                     * @returns {number} 返回位置
                     */
                    var location = function(data,dataList){
                        for(var i=0; i < dataList.length; i++){
                            if($scope.trees[i].id==data.id){
                                return i;
                            }
                        }
                    };

                    //数据替换
                    $scope.trees.splice(location(data,$scope.trees),1,data);
                    $scope.allTrees.splice(location(data,$scope.allTrees),1,data);
                });
            };

            //新建树节点
            $scope.addTree = function (tree) {

                $scope.disease={};
                if(tree != null){
                    $scope.disease = {
                        parentdisease :disease.name,
                        parentId :disease.id
                    };
                }else{
                    $scope.disease = {
                        parentdisease  :"",
                        parentId :""
                    };
                }
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "treeEidt.html",
                    controller:TreeEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.disease;
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    console.log(data);
                    //获取父级位置
                    var location = function(data,dataList){
                        for(var i=0; i < dataList.length; i++){
                            if(dataList[i].id==data.parentId){
                                return  i;
                            }
                        }
                    };
                    /**
                     * 获取 下一个父级位置
                     * @param data 当前数据
                     * @returns {number} 返回位置
                     */
                    /*  var locationNext = function(data,dataList){
                     var index = 0;
                     for(var i=0; i < dataList.length; i++){
                     index ++;
                     //data.parentId
                     if(dataList[i].id==data.parentId){
                     break;
                     }
                     }

                     for(var k = index ; k < dataList.length; k++){
                     //data.parentId
                     if(dataList[k].level===dataList[location(data,dataList)].level){
                     if(dataList[k].parentId===dataList[location(data,dataList)].parentId){
                     return k;
                     }
                     }
                     }
                     return dataList.length;
                     };*/
                    var locationEndChild=function(index,treeList){
                        for(var i=treeList.length-1;i>=0; i--){
                            if(treeList[index].id==treeList[i].parentId){
                                return locationEndChild(i,treeList);
                            }
                        }
                        return index;
                    };

                    if(data.parentId==""){
                        //增加顶级树
                        data.childState = false;
                        data.collapsed = false;
                        data.visable = true;
                        data.level=0;
                        $scope.trees.push(data);
                        $scope.allTrees.push(data);

                        var parentIndex=0;
                        angular.forEach($scope.trees,function(tree){
                            if(tree.level == 0){
                                if(parentIndex%2==0){
                                    tree.color="color-blue";
                                }else{
                                    tree.color="color-yellow";
                                }
                                parentIndex++;
                            }
                        });
                    }else{

                        //增加子级树
                        $scope.trees[location(data,$scope.trees)].childState = true;
                        $scope.trees[location(data,$scope.trees)].collapsed = false;

                        for(var i=0;i<$scope.trees.length; i++){
                            if($scope.trees[i].parentId===data.parentId){
                                $scope.trees[i].visable=true;
                            }
                        }

                        data.childState = false;
                        data.collapsed = false;
                        data.visable = true;
                        data.level =  $scope.trees[location(data,$scope.trees)].level+1;

                        $scope.trees.splice(locationEndChild(location(data,$scope.trees),$scope.trees)+1,0,data);
                        $scope.allTrees.splice(locationEndChild(location(data,$scope.allTrees),$scope.allTrees)+1,0,data);
                    }
                });
            };

            //树搜索
            $scope.treeSearch = function () {
                $scope.organizationSearch = [];
                if($scope.disease != null){
                    $scope.SearchName($scope.allTrees,$scope.disease);
                } else{
                    angular.extend($scope.organizationSearch,$scope.allTrees);
                }
                $scope.trees = $scope.organizationSearch;
            };
            $scope.SearchName = function (data,searchText) {
                console.log(data);
                var searchLength = searchText.length;
                var jsonArray = data;
                for(var i=0 ;i<jsonArray.length ; i++ ){
                    var jsonObject = jsonArray[i];
                    var name = jsonObject.name;
                    var nameLength = name.length;
                    var flag = false;
                    for(var temp=0;temp< (nameLength-searchLength+1);temp++){
                        if(searchText == name.substring(temp,temp+searchLength)){
                            flag = true;
                            break;
                        }
                    }
                    if(flag){
                        var j = 0 ;
                        if(jsonObject.parentId != null){
                            var parentList = [];
                            getParent(jsonObject.parentId,parentList)
                            for(j = parentList.length-1; j >= 0 ;j--){
                                parentList[j].collapsed = false;
                                parentList[j].visable = true;
                                $scope.organizationSearch.push(parentList[j]);
                            }
                        }
                        var tempObj = {};
                        angular.extend(tempObj,jsonObject);
                        var childList = [];
                        countChild(jsonObject.id,childList);
                        if(childList.length == 0){
                            tempObj.collapsed = false;
                            tempObj.visable = true;
                            $scope.organizationSearch.push(tempObj);
                        } else {
                            tempObj.collapsed = true;
                            tempObj.visable = true;
                            $scope.organizationSearch.push(tempObj);
                            for(j = 0; j < childList.length ;j++){
                                $scope.organizationSearch.push(childList[j]);
                            }
                            i =  i + childList.length;
                        }
                    }
                }
            };



            $scope.clean = function(){
                $scope.organization = null;
            };
        }]);
    /**
     * 导入组织时显示错误的控制器
     * @type {*[]}
     */
    var ErrorController =["$scope","$modalInstance","items",
        function ($scope, $modalInstance,items) {
            $scope.errors=items.errors;
            $scope.download=function(){
                $scope.url=items.url;
                window.open($scope.url,"_self");
                $modalInstance.dismiss('cancel');
            };
            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        }];



    var TreeEidt = ["$scope","$modalInstance","items","PlatformService","dialogService",
        function ($scope, $modalInstance, items,PlatformService,dialogService) {
            $scope.$emit('navShow',3);
            $scope.disease = items;
            if($scope.disease.id == null){
                if($scope.disease.parentId == ""){
                    $scope.disease.title = "增加特殊情况";
                }else{
                    $scope.disease.title =$scope.disease.parentdisease +"新增子组织";
                }

            } else {
                $scope.disease.title = "编辑特殊情况";
                /* PlatformService.getSettingDiseaseAllList().success(function(data){
                 if(data.errors === null || data.errors.length > 0){
                 dialogService.tip(data.errors);
                 }else{
                 $scope.organisationList = data.result
                 for(var i=0;i<$scope.organisationList.length;i++){
                 if($scope.organisationList[i].id == $scope.disease.id){
                 $scope.organisationList.splice(i,1);
                 break;
                 }
                 }
                 }
                 });*/
            }

            //数据加载
            $scope.getOwner=function(val){
                var searchParmeter = {
                    isActive : true,
                    disease : val,
                    pageSize : 10,
                    pageNumber : 1
                };
                //sensor: false
                PlatformService.getSettingDiseaseAllList(searchParmeter).then(function(res){

                    var owners = [];
                    console.log(res.data);
                    angular.forEach(res.data.result, function(item){
                        owners.push(item);
                    });
                    return owners;

                });
            };

            //移动标记
            var isMove=false;
            //鼠标位置
            var x,y;
            $scope.mousedown=function(e){
                isMove=true;
                var dialog=$(".modal-dialog");
                if(dialog.css("top")=="auto"){
                    x=e.pageX;
                    y=e.pageY;
                }else{
                    x=e.pageX-parseInt(dialog.css("left"));
                    y=e.pageY-parseInt(dialog.css("top"));
                }
            };
            $scope.mousemove=function(e){
                if(isMove){
                    var left=e.pageX-x;
                    var top=e.pageY-y;
                    $(".modal-dialog").css({top:top,left:left});
                }
            };
            $scope.mouseup=function(){
                isMove=false;
            };

            $scope.doSave = function() {
                console.log($scope.disease);
                if($scope.disease.id == null){
                    //新建
                    PlatformService.createSettingDisease($scope.disease).success(function(data){

                        if(data.errors === null ||
                            data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            //返回id
                            $scope.disease.id = data.id;
                            dialogService.tip([{"message": "保存成功！"}]);
                            //关闭
                            $modalInstance.close($scope.disease);
                            //清空数据
                            $scope.disease={};
                            window.location.reload();
                        }
                    }) ;
                } else {
                    //编辑
                    PlatformService.updateSettingDisease($scope.disease).success(function(data){

                        if(data.errors === null || data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            dialogService.tip([{"message": "保存成功！"}]);
                            //关闭
                            $modalInstance.close($scope.disease);
                            //清空数据
                            $scope.disease={};
                            window.location.reload();
                        }
                    }) ;
                }

            };




            $scope.clean = function () {
                $scope.disease = {};
                $modalInstance.dismiss('cancel');
            };

            $scope.closeAlert = function (index,form) {
                form.splice(index,1);
            };
        }];

})();
/**
 * Created by xiniu on 9/24 0024.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.editFood", []);
    app.controller("EditFoodIndexController", ["$scope", "$http","FoundationService","$location","toolsService", "ThermalControlService", "dialogService",
        function ($scope, $http,FoundationService,$location,toolsService, ThermalControlService, dialogService) {
            $scope.createFoodResult = [];
            $scope.$emit('navShow', 3);

            $scope.foodGet = {
                id:toolsService.parameter("id", $location.absUrl()),
                address:{}
            };
            $scope.attachmentRequest = {};
            $scope.newId = {};
            $scope.attachment = {
                businessType: "EMPLOYEE",
                businessCategory: "COMMON",
                businessId:toolsService.parameter("id", $location.absUrl()),
                list: []
            };
            /* 用于存放附件的ID */
            $scope.attachmentRequest = {ids: []};
            for (var i = 0; i < $scope.attachment.list.length; i++) {
                $scope.attachmentRequest.ids.push($scope.attachment.list[i].id);
            }

            /**
             *图片保存的功能
             */
            $scope.showPicture = function () {
                var fileId = document.getElementById("pictureFile");
                fileId.onchange = function () {
                    var fileList = document.getElementById("pictureFile").files;
                    var file = fileList[0];
                    var fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    //头像上传
                    FoundationService.uploadLogo(file).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            $scope.food.pictureUrl = data.url;
                        }
                    });
                };
            };
            ThermalControlService.getFood({id:$scope.foodGet.id}).success(function(data){
                if(data.errors === null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }else{
                    $scope.food = data.food;
                }
            });

            $scope.doSave = function() {
                // $scope.food = foodItem;
                $scope.food.isActive = true;
                ThermalControlService.updateFood($scope.food).success(function(data){
                    if(data.errors === null ||
                        data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        //返回id
                        $scope.food.id = data.id;
                        dialogService.tip([{"message": "保存成功！"}],"/platform/food/food");
                    }
                }) ;
            };



        }
    ]);
})();
/**
 * Created by xiniu on 9/22 0022.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.evaluate", []);
    app.controller("EvaluateIndexController", ["$scope", "$http", "ThermalControlService", "dialogService", "$modal",
        function ($scope, $http, ThermalControlService, dialogService, $modal) {
            $scope.$emit('navShow', 1);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                totalCount: 0
            };
            $scope.pagedResult = [];
            /**
             * 搜索用户列表
             */
            $scope.getList = function () {
                ThermalControlService.findEvaluate($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.pagedResult = data.result;
                        $scope.vm.totalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip(msg);
                    }
                });
            };
            $scope.getList();

            //编辑
            $scope.edit = function (evaluate) {
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "evaluateEidt.html",
                    controller: SettingEidt,
                    size: "",
                    resolve: {
                        evaluate: function () {
                            return evaluate
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    $scope.getList();
                });
            };


            var SettingEidt = ["$scope", "$modalInstance", "evaluate", "ThermalControlService", "dialogService",
                function ($scope, $modalInstance, evaluate, ThermalControlService, dialogService) {
                    $scope.$emit('navShow', 2);
                    $scope.evaluate = evaluate;
                    console.log( $scope.evaluate);
                    // $scope.foodCategory.title = "新增知识库";
                    //$scope.evaluate = [
                    //    {key: "建议", value: "1"},
                    //    {key: "评价", value: "0"}
                    //];
                    $scope.types = [
                        {key: "热量", value: "1"},
                        {key: "蛋白质", value: "2"},
                        {key: "脂肪", value: "3"},
                        {key: "碳水", value: "4"}
                    ];
                    $scope.doSave = function () {
                        //编辑
                        ThermalControlService.updateEvaluate($scope.evaluate).success(function (data) {
                            if (data.errors === null || data.errors.length > 0) {
                                dialogService.tip(data.errors);
                            } else {
                                dialogService.tip([{"message": "保存成功！"}]);
                                //关闭
                                $modalInstance.close();
                                $modalInstance.dismiss('cancel');
                                //清空数据
                                $scope.evaluate = {};
                            }
                        });
                    };

                    $scope.clean = function () {
                        $modalInstance.close();
                        $modalInstance.dismiss('cancel');
                    };
                }
            ];

        }
    ]);
})();
/**
 * Created by xiniu on 9/24 0024.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.food", []);
    app.controller("FoodIndexController", ["$scope", "$http", "ThermalControlService", "dialogService",
        function ($scope, $http, ThermalControlService, dialogService) {
            $scope.$emit('navShow', 3);

            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                sourceTypes: ["SHOWCAL", "PLADMIN"]
            };

            $scope.doSearch = function () {
                $scope.foodActives = [
                    {sqlSave:'true',name:'已发布'},
                    {sqlSave:'false', name:'未发布'}
                ];

                ThermalControlService.findFood($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.searchResult = data.result;
                        $scope.vm.totalCount = data.totalCount;

                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip(msg);
                    }
                });

           /*     var thisParameter={};
                ThermalControlService.getFoodCategoryAllList(thisParameter).success(function(data){
                    if(data.errors === null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        $scope.foodCategoryList = data.result;
                        /!* for(var i=0;i<$scope.foodCategoryList.length;i++){
                         if($scope.foodCategoryList[i].id == $scope.id){
                         $scope.foodCategoryList.splice(i,1);
                         break;
                         }
                         }*!/
                    }
                });*/
            };

            $scope.doSearch();

            $scope.doFind = function () {
                $scope.searchResult={};
             /*   $scope.searchFood={};
                //复制
                angular.extend($scope.searchFood ,searchFood);*/
               /* var cols = [
                    { title:'类别', name:'foodLargeCategory' , align:'center',width:80},
                    { title:'名称', name:'name' , align:'center',width:80,lockDisplay:true},
                    {title: '重量',name:'weight', align: 'center',width:80},
                    { title:'热量', name:'heat' , align:'center',width:80,type: 'number'},
                    { title:'单位热量', name:'unitheat' , align:'center',width:80,type: 'number'},
                    { title:'蛋白质', name:'protein' , align:'center',width:80,type: 'number'},
                    { title:'脂肪', name:'fat' , align:'center',width:80,type: 'number'},
                    { title:'碳水化合物', name:'carbohydrate' , align:'center',width:80,type: 'number'},
                    { title:'膳食纤维', name:'df' , align:'center',width:80,type: 'number'},
                    { title:'交换份克数', name:'foodExchange' , align:'center',width:80,type: 'number'},
                    { title:'单位食用克数', name:'edubleUnit' ,align:'center',width:110, type: 'number'},
                    { title:'食物分类', name:'foodCategoryId' ,align:'center',width:100, type: 'number'},
                    { title:'减肥推荐', name:'isLose' ,align:'center',width:80, type: 'number'},
                    { title:'增肌推荐', name:'isAddMuscle' ,align:'center',width:80, type: 'number'},
                    { title:'最后修改时间', name:'lastUpdateTime' ,align:'center',width:80, type: 'number'},
                    { title:'最后修改人', name:'lastUpdateBy' ,align:'center',width:80, type: 'number'},
                    { title:'状态', name:'isActive' ,align:'center',width:80, type: 'number'}
                ];
                var mmg = jQuery('#table').mmGrid({
                    height: 500,
                    cols: cols,
                    url: '$tcContent.getURI("api.do?method=api.thermalcontrol.food.find")',
                    method: 'post',
                    remoteSort:true,
                    nowrap:true,
                    root:'result',
                    fullWidthRows: true,
                    loadErrorText:'数据加载异常...',
                    autoLoad: true,
                    indexCol:true,
                    indexColWidth:30,
                    plugins: [
                        $('#pg').mmPaginator({limitList:[10,20,30]})
                    ],
                    params: function(){
                        return {
                            data:$scope.searchF
                        }
                    }
                });*/



                ThermalControlService.findFood($scope.searchF).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.searchResult = data.result;
                        $scope.vm.totalCount = data.totalCount;
                        var cols = [
                            { title:'类别', name:'foodLargeCategory' , align:'center',width:80},
                            { title:'名称', name:'name' , align:'center',width:80,lockDisplay:true},
                            {title: '重量',name:'weight', align: 'center',width:80},
                            { title:'热量', name:'heat' , align:'center',width:80,type: 'number'},
                            { title:'单位热量', name:'unitheat' , align:'center',width:80,type: 'number'},
                            { title:'蛋白质', name:'protein' , align:'center',width:80,type: 'number'},
                            { title:'脂肪', name:'fat' , align:'center',width:80,type: 'number'},
                            { title:'碳水化合物', name:'carbohydrate' , align:'center',width:80,type: 'number'},
                            { title:'膳食纤维', name:'df' , align:'center',width:80,type: 'number'},
                            { title:'交换份克数', name:'foodExchange' , align:'center',width:80,type: 'number'},
                            { title:'单位食用克数', name:'edubleUnit' ,align:'center',width:110, type: 'number'},
                            { title:'食物分类', name:'foodCategoryId' ,align:'center',width:100, type: 'number'},
                            { title:'减肥推荐', name:'isLose' ,align:'center',width:80, type: 'number'},
                            { title:'增肌推荐', name:'isAddMuscle' ,align:'center',width:80, type: 'number'},
                            { title:'最后修改时间', name:'lastUpdateTime' ,align:'center',width:80, type: 'number'},
                            { title:'最后修改人', name:'lastUpdateBy' ,align:'center',width:80, type: 'number'},
                            { title:'状态', name:'isActive' ,align:'center',width:80, type: 'number'}
                        ];
                        var mmg = jQuery('#table').mmGrid({
                            height: 500,
                            cols: cols,
                            url: '$tcContent.getURI("api.do?method=api.thermalcontrol.food.find")',
                            method: 'post',
                            remoteSort:true,
                            nowrap:true,
                            root:'result',
                            fullWidthRows: true,
                            loadErrorText:'数据加载异常...',
                            autoLoad: true,
                            indexCol:true,
                            indexColWidth:30,
                            plugins: [
                                $('#pg').mmPaginator({limitList:[10,20,30]})
                            ],
                            params: function(){
                                return {
                                    data:searchF
                                }
                            }
                        });
                        mmg.removeRow();
                        mmg.addRow($scope.searchResult,undefined);
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip(msg);
                        $scope.searchF=null;
                    }
                });
            };

            /**
             *  发布
             */
            $scope.doActive = function (id) {
                ThermalControlService.activeFood({id: id}).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message": "发布成功！"}], "/platform/food/food");
                    }
                });
            };

            /**
             *  取消发布
             */
            $scope.cancelActive = function (id) {
                ThermalControlService.inactiveFood({id: id}).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message": "取消发布成功！"}], "/platform/food/food");
                    }
                });
            };

        }

    ]);
    // 批量导入数据
    app.controller("FoodImportController", ["$scope", "$http","$modal", "ThermalControlService", "dialogService",
        function ($scope, $http, $modal, ThermalControlService, dialogService) {
            $scope.$emit('navShow', 3);
            $scope.errorOpen = function (errors,url) {
                $scope.result={};
                $scope.result.errors=errors;
                $scope.result.url=url;
                var modalInstance = $modal.open({
                    templateUrl: "errors.html",
                    controller: ErrorCtrl,
                    resolve: {
                        items: function () {
                            return  $scope.result;
                        }
                    }
                });
                modalInstance.result.then(function () {
                }, function () {
                });
            };
            $scope.upFileClick=function(){
                var upImportFileId=document.getElementById("upImportFileId");
                upImportFileId.onchange=function(){
                    var upImportFile;
                    var upImportFileList =upImportFileId.files;
                    var upImportFilename;
                    if(upImportFileList){
                        upImportFile = upImportFileList[0];
                        upImportFilename=upImportFile.name;
                    }else{
                        upImportFilename =upImportFileId.value;
                    }
                    var str =upImportFilename.substr(upImportFilename.indexOf(".")+1);
                    if(!(str=="xls" || str=="xlsx" || str=="et")){
                        $("#upImportFile").val("");
                        dialogService.tip([{"message":"请上传Excel支持的文件(xls,xlsx,et等)！" }]);
                    }else{
                        $("#upImportFile").val(upImportFilename);
                    }
                };

            };
            // 上传
            $scope.upFileSave=function(){
                var file = document.getElementById("upImportFileId").files[0];
                console.log(file);
                if(!file){
                    dialogService.tip([{"message": "请上传文件！"}]);
                    return;
                }
                ThermalControlService.apiFoodImport(file).success(function(data){
                    if(data.errors == null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                            dialogService.tip([{"message": "导入成功！"}]);
                    }
                });
            };

            // 下载模版
            $scope.downloadTemplate=function(){
                ThermalControlService.apiFoodOutputTemplate().success(function(data){
                    if(data.errors == null || data.errors.length > 0){
                        //$scope.errorOpen(data.errors,data.url);
                    }else{
                        window.open(data.url,"_self");
                    }
                });
            };
        }]);

    var ErrorCtrl =["$scope","$modalInstance","items",
        function ($scope, $modalInstance,items) {
            $scope.errors=items.errors;
            $scope.url=items.url;
            $scope.download=function(){
                window.open($scope.url,"_self");
                $modalInstance.dismiss('cancel');
            };
            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
            //关闭错误
            $scope.closeAlert = function (index,form) {
                form.splice(index,1);
            };
        }];
    //创建用户
   /* app.controller("FoodIndexController", ["$scope", "$http","ThermalControlService","dialogService",
        function ($scope, $http, ThermalControlService,dialogService) {



            /!**
             *图片保存的功能
             *!/
   /!*         $scope.showPicture=function(){
                var fileId=document.getElementById("pictureFile");
                fileId.onchange=function(){
                    var fileList = document.getElementById("pictureFile").files;
                    var file = fileList[0];
                    var fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    //头像上传
                    ThermalControlService.uploadLogo(file).success(function(data){
                        if(data.errors === null || data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            $scope.user.avatarurl = data.url;
                            $scope.user.avatarId = data.id;
                        }
                    });
                };
            };


            $scope.doSave = function () {
                console.log($scope.user);
                if($scope.user.birthday instanceof  Date){
                    $scope.user.birthday = $scope.user.birthday.format('yyyy-MM-dd');
                }
                ThermalControlService.createSysUser($scope.user).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message":"食物创建成功！" }],"/platform/food");
                    }
                })
            }*!/
        }
    ]);*/
})();
/**
 * Created by xiniu on 9/22 0022.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.foodCategory",[]);
    app.controller("foodCategoryIndexController", ["$scope", "$http","$modal" ,"ThermalControlService", "dialogService",
        function ($scope,$http,$modal,ThermalControlService, dialogService) {
            $scope.$emit('navShow',3);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                sourceTypes: ["SHOWCAL", "PLADMIN"]
            };




            /**
             * 搜索用户列表
             */
            $scope.getList = function () {
                ThermalControlService.getFoodCategoryAllList($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.foodCategoryResult = data.result;
                        $scope.vm.foodCategoryTotalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip(msg);
                    }
                });
            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;
                $scope.getList();
            };
            $scope.doSearch();

            //新增
            $scope.addFoodCategory = function (foodCategory) {
                $scope.foodCategory={};

                //复制
                angular.extend($scope.foodCategory ,foodCategory);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "foodCategoryEidt.html",
                    controller:SettingEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.foodCategory;
                        }
                    }
                });
            };

            //编辑
            $scope.edit = function (foodCategory) {
                $scope.foodCategory={};
                //复制
                angular.extend($scope.foodCategory ,foodCategory);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "foodCategoryEidt.html",
                    controller:SettingEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.foodCategory;
                        }
                    }
                });
                modalInstance.result.then(function (data){
                    window.location.reload();
                });
            };

            //删除
            $scope.delete = function(foodCategory) {
                var dialogDefaults = {
                    size:"sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除这个食物吗？",
                    type:"delete",
                    callback: function () {
                        ThermalControlService.deleteFoodCategory({id:foodCategory.id}).success(function(data){
                            if(data.errors === null || data.errors.length > 0){
                                dialogService.tip(data.errors);
                            }else{
                                dialogService.tip([{"message":"删除成功！" }]);
                                window.location.reload();
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);
            };


            var SettingEidt = ["$scope","$modalInstance","items","ThermalControlService","dialogService",
                function ($scope, $modalInstance, items,ThermalControlService,dialogService) {
                    $scope.$emit('navShow',2);
                    $scope.foodCategory = items;
                    // $scope.foodCategory.title = "新增知识库";

                    $scope.doSave = function() {
                        if($scope.foodCategory.id == null){
                            //新建
                            ThermalControlService.createFoodCategory($scope.foodCategory).success(function(data){
                                if(data.errors === null ||
                                    data.errors.length > 0){
                                    dialogService.tip(data.errors);
                                }else{
                                    //返回id
                                    $scope.foodCategory.id = data.id;
                                    dialogService.tip([{"message": "保存成功！"}]);
                                    //关闭
                                    $modalInstance.close($scope.foodCategory);
                                    //清空数据
                                    $scope.foodCategory={};
                                    window.location.reload();
                                }
                            }) ;
                        } else {
                            //编辑
                            ThermalControlService.updateFoodCategory($scope.foodCategory).success(function(data){

                                if(data.errors === null || data.errors.length > 0){
                                    dialogService.tip(data.errors);
                                }else{
                                    dialogService.tip([{"message": "保存成功！"}]);
                                    //关闭
                                    $modalInstance.close($scope.foodCategory);
                                    //清空数据
                                    $scope.foodCategory={};
                                }
                            }) ;
                        }
                    };

                    $scope.clean = function () {
                        $scope.disease = {};
                        $modalInstance.dismiss('cancel');
                    };
                }
            ];



        }
    ]);

})();
/**
 * Created by xiniu on 9/22 0022.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.integral", []);
    app.controller("IntegralIndexController", ["$scope", "$http", "PlatformService", "dialogService",
        function ($scope, $http, PlatformService, dialogService) {
            $scope.$emit('navShow', 1);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                totalCount:0
            };
            $scope.integrals = [
                {key: "增加", value: 1},
                {key: "消费", value: 0}
            ];
            $scope.rules = [];
            $scope.getList=function(){
            PlatformService.findIntegralrule($scope.vm).success(function (data) {
                if (data.errors && data.errors.length === 0) {
                    $scope.rules = data.result;
                    $scope.vm.totalCount = data.totalCount;
                    for (var i = 0; i < data.result.length; i++) {
                        $scope.rules[i].edit = true;
                    }
                } else {
                    var msg = "由于以下原因，未能取得数据\n";
                    for (var i = 0; i < data.errors.length; i++) {
                        msg += (i + 1) + "." + data.errors[i].message + "\n";
                    }
                    dialogService.tip(msg);
                }
            });
            }
            $scope.getList();
            $scope.edit = function (index) {
                $scope.rules[index].edit = false;
            };
            $scope.save = function (rule, index) {
                $scope.validateForm.$errors = [];
                $scope.rules[index].showColor = "";
                if (rule.value == null || rule.value == "") {
                    $scope.validateForm.$errors.push("第" + (index + 1) + "条积分值不能为空");
                    $scope.rules[index].showColor = "border-color:red";
                    return false;
                }
                PlatformService.updateIntegralrule(rule).success(function (data) {
                    if (null == data.errors || 0 < data.errors.length) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.getList();
                    }
                })
            };
        }
    ]);
})();
(function () {
    "use strict";
    // 商品首页控制器
    var itemIndexController = function ($scope, dialogService, $modal, toolsService, $location, MdService) {
        //显示不同的导航NAV的数值
        $scope.$emit('nav', 5);

        $scope.items = [];
        $scope.categories = [];
        $scope.vm = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };
        //弹出式日历触发函数
        $scope.openStart = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.startDate = true;
        };
        $scope.checkboxlist = [
            {key: "save", value: "未发布", state: false, hide: false},
            {key: "submit", value: "已发布", state: false, hide: false},
        ];
        $scope.alreadySubmit = [0, 1];
        $scope.changeStatus = function (status) {
            $scope.selectedStatus = [];
            for (var i = 0; i < status.list.length; i++) {
                $scope.selectedStatus.push(status.list[i].key);
            }
            if (status.list.length == $scope.checkboxlist.length) {
                $scope.alreadySubmit = [0, 1];
            }
            else {
                for (var i = 0; i < $scope.selectedStatus.length; i++) {
                    if ($scope.selectedStatus[i] == "save") {
                        $scope.alreadySubmit = [];
                        $scope.alreadySubmit.push(0);
                    }
                    if ($scope.selectedStatus[i] == "submit") {
                        $scope.alreadySubmit = [];
                        $scope.alreadySubmit.push(1);
                    }
                }
            }
            if (status.list.length == 0) {
                $scope.alreadySubmit = [0, 1];
            }
        };
        $scope.categories = [];
        $scope.cate = {
            pageNumber: 1,
            pageSize: 0,
            totalCount: 0
        };
        MdService.findCategory($scope.cate).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.categories = data.result;

            }
        });
        //弹出式日历触发函数
        $scope.openEnd = function ($event) {
            $event.preventDefault();
            $event.stopPropagation();
            $scope.endDate = true;
        };
        $scope.getList = function () {
            $scope.vm.alreadySubmit = $scope.alreadySubmit;
            if ($scope.vm.startDate instanceof Date) {
                $scope.vm.approveStartTime = $scope.vm.startDate.format("yyyy-MM-dd");
            }
            if ($scope.vm.endDate instanceof Date) {
                $scope.vm.approveEndTime = $scope.vm.endDate.format("yyyy-MM-dd");
            }
            MdService.findItem($scope.vm).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.items = data.result;
                    $scope.vm.totalCount = data.totalCount;
                }
            });
        };
        $scope.getList();
        $scope.doFind = function () {
            $scope.getList();
        };
        $scope.doDelete = function (item) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除此商品吗？",
                callback: function () {
                    MdService.deleteItem({id: item.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "删除成功"}], null);
                            $scope.items.splice($scope.items.indexOf(item), 1);
                            $scope.vm.totalCount--;
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.create = function () {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "create.html",
                size: "lg",
                controller: CreateController
            });
            modalInstance.result.then(function () {
                $scope.getList();
            })
        };
        $scope.changeOrder = function (item) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "changeOrder.html",
                size: "sm",
                resolve: {
                    item: function () {
                        return item;
                    }
                },
                controller: ChangeOrderController
            });
            modalInstance.result.then(function () {
                $scope.getList();
            })
        };
        $scope.check = function (item) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "check.html",
                size: "lg",
                resolve: {
                    item: function () {
                        return item;
                    }
                },
                controller: CheckController
            });
            modalInstance.result.then(function () {
               $scope.getList();
            })
        };
        $scope.approve = function (item) {
            var dialogDefaults = {
                size: "sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定发布",
                headerText: "继续....?",
                bodyText: "您确定要发布吗？",
                callback: function () {
                    MdService.approveItem({id: item.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "发布成功"}], null);
                            ////$scope.articles[$scope.articles.indexOf(article)].isApproved=true;
                            //window.location.reload();
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.cancel = function (item) {
            var dialogDefaults = {
                size: "sm"
            };
            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定取消发布",
                headerText: "继续....?",
                bodyText: "您确定要取消发布吗？",
                callback: function () {
                    MdService.cancelItem({id: item.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "取消成功"}], null);
                            //$scope.articles[$scope.articles.indexOf(article)].isApproved=true;
                            $scope.getList();
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };


        $scope.createComment = function (item) {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "createComment.html",
                size: "lg",
                resolve: {
                    id: function () {
                        return item.id;
                    }
                },
                controller: CreateCommentPostController
            });
            modalInstance.result.then(function () {

            })
        };
    };
    var CreateController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, MdService, FoundationService) {
        $scope.attachmentRequest = {};
        $scope.newId = {};
        $scope.attachment = {
            businessType: "EMPLOYEE",
            businessCategory: "COMMON",
            list: []
        };
        /* 用于存放附件的ID */
        $scope.attachmentRequest = {ids: []};
        for (var i = 0; i < $scope.attachment.list.length; i++) {
            $scope.attachmentRequest.ids.push($scope.attachment.list[i].id);
        }
        FoundationService.apiFoundationIdGet().success(function (data) {
            if (null == data.errors || 0 < data.errors.length)
                dialogService.tip(data.errors);
            else {
                $scope.newId = data.id;
                $scope.attachment.businessId=$scope.newId;
            }
        });
        $scope.categories = [];
        $scope.cate = {
            pageNumber: 1,
            pageSize: 0,
            totalCount: 0
        };
        MdService.findCategory($scope.cate).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.categories = data.result;
            }
        });
        $scope.item = {};
        $scope.itemDetail = {};
        $scope.itemEcommerce = {};
        $scope.itemPics = [];
        /**
         *图片保存的功能
         */
        $scope.showPicture = function () {
            var fileId = document.getElementById("pictureFile");
            fileId.onchange = function () {
                var fileList = document.getElementById("pictureFile").files;
                var file = fileList[0];
                var fileReader = new FileReader();
                fileReader.readAsDataURL(file);
                //头像上传
                FoundationService.uploadLogo(file).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.item.pictureId = data.id;
                        $scope.item.avatarurl = data.url;
                    }
                });
            };
        };
        $scope.create = function () {
            for (var i = 0; i < $(".upload-img").length; i++) {
                $scope.itemPics.push({pictureId: $(".upload-img").eq(i).attr("name")});
            }
            $scope.item.id = $scope.newId;
            $scope.item.itemDetailCreateRequest = $scope.itemDetail;
            $scope.item.itemEcommerceCreateRequest = $scope.itemEcommerce;
            $scope.item.itemPictureCreateRequest = $scope.itemPics;
            MdService.createItem($scope.item).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "创建成功！"}], null);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };
    var CheckController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, MdService, item,FoundationService) {
        $scope.attachmentRequest = {};
        $scope.newId = {};
        $scope.attachment = {
            businessType: "EMPLOYEE",
            businessCategory: "COMMON",
            businessId: item.id,
            list: []
        };
        /* 用于存放附件的ID */
        $scope.attachmentRequest = {ids: []};
        for (var i = 0; i < $scope.attachment.list.length; i++) {
            $scope.attachmentRequest.ids.push($scope.attachment.list[i].id);
        }
        $scope.item = {};
        $scope.categories = [];
        $scope.cate = {
            pageNumber: 1,
            pageSize: 0,
            totalCount: 0
        };

        $scope.showPicture = function () {
            var fileId = document.getElementById("pictureFile");
            fileId.onchange = function () {
                var fileList = document.getElementById("pictureFile").files;
                var file = fileList[0];
                var fileReader = new FileReader();
                fileReader.readAsDataURL(file);
                //头像上传
                FoundationService.uploadLogo(file).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.item.pictureId = data.id;
                        $scope.item.avatarurl = data.url;
                    }
                });
            };
        };
        MdService.findCategory($scope.cate).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.categories = data.result;

            }
        });
        MdService.getItem({id: item.id}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.item = data.item;
            }
        });
        $scope.update = function () {
            $scope.item.update = true;
            MdService.updateItem($scope.item).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "更新成功！"}], null);
                    $modalInstance.close($scope.item);
                    $modalInstance.dismiss('cancel');
                }
            });

        };
        $scope.submitApprove = function (item) {
            MdService.approveItem({id: item.id}).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    dialogService.tip([{"message": "发布成功"}], null);
                    $modalInstance.close($scope.item);
                    $modalInstance.dismiss('cancel');
                }
            });

        };
        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };
    var ChangeOrderController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, MdService, item) {
        $scope.item = {};
        MdService.getItem({id: item.id}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.item = data.item;
            }
        });
        $scope.sure = function () {
            MdService.changeSort($scope.item).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "更新成功！"}], null);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });

        };
        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };
    var categoryController = function ($scope, dialogService, $modal, toolsService, $location, MdService) {
        //每个导航对应的图标的高亮
        $scope.$emit('navShow', 5);
        $scope.categories = [];
        $scope.vm = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };
        $scope.maxPageSize = 5;
        $scope.getAll = function () {
            MdService.findCategory($scope.vm).success(function (data) {
                if (null == data.errors || 0 < data.errors.length) {
                    dialogService.tip(data.errors);
                } else {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors, null, null);
                    } else {
                        console.log(data);
                        $scope.categories = data.result;
                        $scope.vm.totalCount = data.totalCount;
                        for (var i = 0; i < data.result.length; i++) {
                            $scope.categories[i].edit = true;
                            $scope.categories[i].memoName = true
                        }

                    }
                }
            });
        };
        $scope.getAll();
        for (var i = 0; i < $scope.categories.length; i++) {
            $scope.showNumber[i] = true;
        }
        $scope.doDelete = function (category) {
            var dialogDefaults = {
                size: "sm"
            };

            var dialogOptions = {
                closeButtonText: "取消",
                actionButtonText: "确定删除",
                headerText: "继续....?",
                bodyText: "您确定要删除此目录吗？",
                callback: function () {
                    MdService.deleteCategory({id: category.id}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            dialogService.tip([{"message": "删除成功"}], null);
                            $scope.categories.splice($scope.categories.indexOf(category), 1);
                            $scope.vm.totalCount--;
                        }
                    });
                }
            };
            dialogService.confirm(dialogDefaults, dialogOptions);
        };
        $scope.create = function () {
            //弹出窗口
            var modalInstance = $modal.open({
                templateUrl: "create.html",
                size: "lg",
                controller: CreateCategoryController
            });
            modalInstance.result.then(function () {
                $scope.getAll();
            })
        };
        $scope.edit = function (index) {
            $scope.categories[index].edit = false;
        };
        $scope.save = function (category, index) {
            MdService.updateCategory(category).success(function (data) {
                if (null == data.errors || 0 < data.errors.length) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.categories[index].edit = true;
                }
            })
        };
    };
    var CreateCategoryController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, MdService) {
        $scope.clazzs = [];
        $scope.create = function () {
            MdService.createCategory({clazzCreateRequests: $scope.clazzs}).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    dialogService.tip([{"message": "保存成功！"}]);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });
        };
        //添加行
        $scope.addLine = function (index) {
            var clazz = {};
            $scope.clazzs.splice(index + 1, 0, clazz);
        };
        $scope.addLine(0);
        //删除行
        $scope.removeLine = function (index) {
            if (1 == $scope.clazzs.length) {
                $scope.clazzs.splice(index, 1);
                dialogService.tip([{"message": "列表不能为空！新加一条空数据"}], null, 1000);
                //新加一条空数据
                $scope.addLine(0);
            } else {
                $scope.clazzs.splice(index, 1);
            }
        };


        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };

    var CreateCommentPostController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, PlatformService, id) {
        $scope.commentPosts = [];

        $scope.comment = {
            pageNumber: 1,
            pageSize: 0,
            threadId: id,
            totalCount: 0
        };
        $scope.usertypes = [];
        $scope.usertypes.push("SHOWCAL");
        //查询所有瘦咖
        $scope.users = [];
        $scope.itemInfoOptions = {
            pageSize: 10,
            pageNumber: 1,
            totalCount: 0,
            usertypes: $scope.usertypes,
            methodName: "findUser"
        };

        $scope.findUser = function () {

            PlatformService.findSysUser($scope.itemInfoOptions).success(function (data) {
                if (null == data.errors || 0 < data.errors.length) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.users.totalCount = data.totalCount;
                    $scope.users = data.result;
                }
            });
        };

        $scope.selectItemInfo = function (user, sysUser) {
            user.name = true;
            user.userId = sysUser.id;
            user.userName = sysUser.nickName;
        };
        //编辑行加上高亮
        $scope.selectMemo = function (user) {
            if (user.name) {
                user.name = false;
            }
            user.trCl = "editing-memo";
        };

        PlatformService.findCommentPost($scope.comment).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {
                $scope.commentPosts = data.result;
                $scope.comment.totalCount = data.totalCount;
                if (data.totalCount == 0) {
                    $scope.addLine(0);
                }
            }
        });
        //添加行
        $scope.addLine = function (index) {
            var commentPost = {threadId: id};
            $scope.commentPosts.splice(index + 1, 0, commentPost);
        };
        $scope.addLine(0);
        //删除行
        $scope.removeLine = function (index) {
            if (1 == $scope.commentPosts.length) {
                $scope.commentPosts.splice(index, 1);
                dialogService.tip([{"message": "列表不能为空！新加一条空数据"}], null, 1000);
                //新加一条空数据
                $scope.addLine(0);
            } else {
                $scope.commentPosts.splice(index, 1);
            }
        };
        $scope.create = function () {
            PlatformService.createListCommentPost({commentPostCreateRequestList: $scope.commentPosts}).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    dialogService.tip([{"message": "保存成功！"}]);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });

        };
        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };

    angular.module("xn.pl.md", [])
        .controller("ItemIndexController", ["$scope", "dialogService", "$modal", "toolsService", "$location", "MdService", itemIndexController])
        .controller("CategoryController", ["$scope", "dialogService", "$modal", "toolsService", "$location", "MdService", categoryController])

})
();
(function () {
    "use strict";

    var app= angular.module("sc.pl.keyword", []);


    app.controller("KeyWordIndexController",["$scope", "$http","$modal","PlatformService","dialogService",
        function ($scope, $http,$modal,PlatformService,dialogService) {
            $scope.$emit('navShow',1);
            //绑定页面的树
            $scope.trees=[];
            //整个树
            $scope.allTrees=[];
            $scope.collapsed=false;
            /**
             * 递归查找下一级
             * @param pid  父级id
             * @param orgList   查找的数组
             * @param level     层级数
             */
            var getChild = function(pid,keywordList,level){
                level ++;
                angular.forEach(keywordList,function(keyword){
                    if(keyword.parentId === pid){
                        keyword.level = level;
                        keyword.visable=false;
                        $scope.allTrees.push(keyword);
                        getChild(keyword.id,keywordList,level);
                    }
                });
            };
            var getParent = function(pId,keywordList){
                angular.forEach($scope.allTrees,function(keyword){
                    if(keyword.id === pId){
                        keywordList.push(keyword);
                        getParent(keyword.parentId,orgList);
                    }
                });
            };

            var countChild = function(pid,keywordList){
                angular.forEach($scope.allTrees,function(keyword){
                    if(keyword.parentId === pid){
                        keywordList.push(keyword);
                        countChild(org.id,keywordList);
                    }
                });
            };
            $scope.vm = {};
            PlatformService.getSettingKeywordAllList($scope.vm).success(function(data){

                if(data.errors === null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }else{
                    //组建新的树
                    if(data.result.length > 0){
                        var parentIndex=0;
                        angular.forEach(data.result,function(keyword){
                            if(keyword.parentId ==null){
                                if(parentIndex%2==0){
                                    keyword.color="color-blue";
                                }else{
                                    keyword.color="color-yellow";
                                }
                                parentIndex++;
                                keyword.level = 0;
                                keyword.visable=true;
                                $scope.allTrees.push(keyword);
                                getChild(keyword.id,data.result,0);
                            }
                        });

                        //新建状态及是否有子栏目
                        for( var i=0; i< $scope.allTrees.length-1;i++){
                            if($scope.allTrees[i].id == $scope.allTrees[i+1].parentId){
                                $scope.allTrees[i].childState=true;
                                $scope.allTrees[i].collapsed=true;
                            }else{
                                $scope.allTrees[i].childState=false;
                                $scope.allTrees[i].collapsed=false;
                            }
                        }
                        $scope.allTrees[$scope.allTrees.length-1].childState=false;
                        angular.extend($scope.trees,$scope.allTrees);
                    }
                }
            });

            $scope.collapseTree = function(tree,parent){
                angular.forEach(tree,function(keyword) {
                    if(keyword.parentId === parent.id){
                        keyword.visable = (!parent.collapsed && parent.visable);
                        $scope.collapseTree(tree,keyword);
                    }
                });
            };
            $scope.toggle = function(i) {
                $scope.trees[i].collapsed=! $scope.trees[i].collapsed;
                $scope.collapseTree($scope.trees,$scope.trees[i]);

            };

            //删除树
            $scope.delete = function(tree) {

                if(tree.childState){
                    dialogService.tip([{"message": "请先删除子关键字！"}]);
                    return;
                }

                var dialogDefaults = {
                    size:"sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除关键字吗？",
                    type:"delete",
                    callback: function () {
                        PlatformService.deleteSettingKeyword({id:tree.id}).success(function(data){
                            if(data.errors === null || data.errors.length > 0){
                                dialogService.tip(data.errors);
                            }else{
                                dialogService.tip([{"message":"删除成功！" }]);
                                window.location.reload();
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);

            };



            //树编辑
            $scope.edit = function (tree) {
                $scope.keyword={};
                //复制
                angular.extend($scope.keyword ,tree);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "treeEidt.html",
                    controller:TreeEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.keyword;
                        }
                    }
                });
                modalInstance.result.then(function (data){
                    window.location.reload();

                });
            };

            //新建子关键字
            $scope.addTree = function (tree) {

                $scope.keyword={};
                if(tree != null){
                    $scope.keyword = {
                        parentKeyword  :tree.keyword,
                        parentId :tree.id
                    };
                }else{
                    $scope.keyword = {
                        parentKeyword  :"",
                        parentId :""
                    };
                }
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "treeEidt.html",
                    controller:TreeEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.keyword;
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    window.location.reload();
                });
            };
            $scope.clean = function(){
                $scope.organization = null;
            };
        }]);



    var TreeEidt = ["$scope","$modalInstance","items","PlatformService","dialogService",
        function ($scope, $modalInstance, items,PlatformService,dialogService) {
            $scope.$emit('navShow',1);
            $scope.keyword = items;

            if($scope.keyword.id == null){
                if(!$scope.keyword.parentId){
                    $scope.keyword.title = "增加关键字";
                }else{
                    $scope.keyword.title = $scope.keyword.parentKeyword +"新增二级关键字";
                }

            } else {
                $scope.keyword.title = "编辑关键字";
            }

            //移动标记
            var isMove=false;
            //鼠标位置
            var x,y;
            $scope.mousedown=function(e){
                isMove=true;
                var dialog=$(".modal-dialog");
                if(dialog.css("top")=="auto"){
                    x=e.pageX;
                    y=e.pageY;
                }else{
                    x=e.pageX-parseInt(dialog.css("left"));
                    y=e.pageY-parseInt(dialog.css("top"));
                }
            };
            $scope.mousemove=function(e){
                if(isMove){
                    var left=e.pageX-x;
                    var top=e.pageY-y;
                    $(".modal-dialog").css({top:top,left:left});
                }
            };
            $scope.mouseup=function(){
                isMove=false;
            };

            $scope.doSave = function() {
                console.log($scope.keyword);
                //数据提交
                    if($scope.keyword.id == null){
                        //新建
                        PlatformService.createSettingKeyword($scope.keyword).success(function(data){
                            $scope.validateForm.$errors = [];
                            if(data.errors === null || data.errors.length > 0){
                                for(var i=0;i<data.errors.length;i++){
                                    $scope.validateForm.$errors.push(data.errors[i].message);
                                }
                            }else{
                                //返回id
                                dialogService.tip([{"message": "保存成功！"}]);

                                //关闭
                                $modalInstance.close($scope.keyword);

                                //清空数据
                                $scope.keyword={};
                                location.reload();
                            }
                        }) ;
                    } else {
                        //编辑
                        PlatformService.updateSettingKeyword($scope.keyword).success(function(data){
                            $scope.validateForm.$errors = [];
                            if(data.errors === null || data.errors.length > 0){
                                for(var i=0;i<data.errors.length;i++){
                                    $scope.validateForm.$errors.push(data.errors[i].message);
                                }
                            }else{
                                dialogService.tip([{"message": "保存成功！"}]);
                                //关闭
                                $modalInstance.close($scope.org);
                                //清空数据
                                $scope.keyword={};
                                location.reload();
                            }
                        }) ;
                    }
            };



            $scope.clean = function () {
                $scope.keyword = {};
                $modalInstance.dismiss('cancel');
            };

            $scope.closeAlert = function (index,form) {
                form.splice(index,1);
            };
        }];

})();
(function(){
    "use strict";

    /**
     * 修改密码
     * @author zxl
     * @param $scope
     */
    var passwordChangeController = function($scope,PlatformService,dialogService){
        // 保存新密码
        $scope.doChange = function(){

            if($scope.vm.loginPassword != $scope.vm.confirmPassword){
                alert("密码不一致");
                return;
            }

            PlatformService.modifyLoginPasswordCheck($scope.vm).success(function(data){
                if (data.errors == null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }else{
                    dialogService.tip([{message:"修改成功"}],"../")
                }
            });
        };
    };

    // 定义module,并指明依赖模块
    angular.module("sc.pl.password",[])
        .controller("PasswordChangeController",["$scope","PlatformService","dialogService",passwordChangeController]);
})();
/**
 * Created by Administrator on 2015/9/22.
 */
(function () {
    "use strict";
    var app= angular.module("sc.pl.questionTag",[]);
    //index
    app.controller("QuestionTagIndexController",["$scope", "$http","$modal","PlatformService","dialogService",
        function ($scope, $http,$modal,PlatformService,dialogService) {
            $scope.$emit('navShow',1);
            //绑定页面的树
            $scope.trees=[];

            //整个树
            $scope.allTrees=[];

            $scope.collapsed=false;
            $scope.collapsed=false;
            var parameter = {questiontag:''};
            $scope.search = function(){
                PlatformService.getSettingQuestionTagAllList(parameter).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.questiontags = data.result;
                        $scope.questiontags.totalCount = data.totalCount;
                    }
                });
            }
            $scope.search();
            /**
             * 递归查找下一级
             * @param pid  父级id
             * @param keywordList   查找的数组
             * @param level     层级数
             */
            var getChild = function(pid,questiontagList,level){
                level ++;
                angular.forEach(questiontagList,function(questiontag){
                    if(questiontag.parentId === pid){
                        questiontag.level = level;
                        questiontag.visable=false;
                        $scope.allTrees.push(questiontag);
                        getChild(questiontag.id,questiontagList,level);
                    }
                });
            };
            var getParent = function(pId,questiontagList){
                angular.forEach($scope.allTrees,function(questiontag){
                    if(questiontag.id === pId){
                        questiontagList.push(questiontag);
                        getParent(questiontag.parentId,questiontagList);
                    }
                });
            };

            var countChild = function(pid,questiontagList){
                angular.forEach($scope.allTrees,function(questiontag){
                    if(questiontag.parentId === pid){
                        questiontagList.push(questiontag);
                        countChild(questiontag.id,questiontagList);
                    }
                });
            };
            var parameter = {questiontag:''};
            PlatformService.getSettingQuestionTagAllList(parameter).success(function(data){

                if(data.errors === null || data.errors.length > 0){
                    dialogService.tip(data.errors);
                }else{
                    //组建新的树
                    if(data.result.length > 0){
                        var parentIndex=0;
                        angular.forEach(data.result,function(organization){
                            if(organization.parentId ==null){
                                if(parentIndex%2==0){
                                    organization.color="color-blue";
                                }else{
                                    organization.color="color-yellow";
                                }
                                parentIndex++;
                                organization.level = 0;
                                organization.visable=true;
                                $scope.allTrees.push(organization);
                                getChild(organization.id,data.result,0);
                            }
                        });

                        //新建状态及是否有子栏目
                        for( var i=0; i< $scope.allTrees.length-1;i++){
                            if($scope.allTrees[i].id == $scope.allTrees[i+1].parentId){
                                $scope.allTrees[i].childState=true;
                                $scope.allTrees[i].collapsed=true;
                            }else{
                                $scope.allTrees[i].childState=false;
                                $scope.allTrees[i].collapsed=false;
                            }
                        }
                        $scope.allTrees[$scope.allTrees.length-1].childState=false;
                        angular.extend($scope.trees,$scope.allTrees);
                    }
                }
            });

            $scope.collapseTree = function(tree,parent){
                angular.forEach(tree,function(organization) {
                    if(organization.parentId === parent.id){
                        organization.visable = (!parent.collapsed && parent.visable);
                        $scope.collapseTree(tree,organization);
                    }
                });
            };
            $scope.toggle = function(i) {
                $scope.trees[i].collapsed=! $scope.trees[i].collapsed;
                $scope.collapseTree($scope.trees,$scope.trees[i]);

            };

            //删除树
            $scope.delete = function(tree) {
                var dialogDefaults = {
                    size:"sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除该标签吗？",
                    type:"delete",
                    callback: function () {
                PlatformService.deleteSettingQuestionTag({id:tree.id}).success(function(data){
                            if(data.errors === null || data.errors.length > 0){
                                dialogService.tip(data.errors);
                            }else{
                                /**
                                 * 获取树的值在数组中的位置
                                 * @param data 当前数据
                                 * @returns {number} 返回位置
                                 */
                                var location = function(data,dataList){
                                    for(var i=0; i < dataList.length; i++){
                                        if(dataList[i].id===data.id){
                                            return  i;
                                        }
                                    }
                                };

                                /**
                                 * 查找兄弟的个数
                                 * @param data       当前数据
                                 * @param dataList    查询的数组
                                 * @returns {number}  返回兄弟和自己的个数
                                 */

                                var brothers = function(data,dataList){
                                    var number = 0;
                                    for(var i=0; i < dataList.length; i++){
                                        if(dataList[i].parentId===data.parentId){
                                            number++;
                                        }
                                    }
                                    return number;
                                };

                                /**
                                 * 查找父级别位置
                                 * @param data
                                 * @param dataList
                                 * @returns {number}
                                 */

                                var locationParent = function(data,dataList){
                                    for(var i=0; i < dataList.length; i++){
                                        if(dataList[i].id ===data.parentId){
                                            return i;
                                        }
                                    }
                                };
                                if( brothers(tree,$scope.trees)===1){
                                    if(locationParent(tree,$scope.trees)!=null){
                                        $scope.trees[locationParent(tree,$scope.trees)].childState = false;
                                    }
                                }

                                if( brothers(tree,$scope.allTrees)===1){
                                    if(locationParent(tree,$scope.allTrees)!=null){
                                        $scope.allTrees[locationParent(tree,$scope.allTrees)].childState = false;
                                    }
                                }

                                $scope.trees.splice(location(tree,$scope.trees),1);
                                $scope.allTrees.splice(location(tree,$scope.allTrees),1);

                                var parentIndex=0;
                                angular.forEach($scope.trees,function(tree){
                                    if(tree.level == 0){
                                        if(parentIndex%2==0){
                                            tree.color="color-blue";
                                        }else{
                                            tree.color="color-yellow";
                                        }
                                        parentIndex++;
                                    }
                                });
                                dialogService.tip([{"message":"删除成功！" }]);
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);

            };



            //树编辑
            $scope.edit = function (tree) {
                $scope.questiontag={};
                //复制
                angular.extend($scope.questiontag ,tree);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "treeEidt.html",
                    controller:TreeEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.questiontag;
                        }
                    }
                });
                modalInstance.result.then(function (data){

                    window.location.reload();

                    /**
                     * 获取树的值在数组中的位置
                     * @param data 当前数据
                     * @returns {number} 返回位置
                     */
                    /*                var location = function(data,dataList){
                     for(var i=0; i < dataList.length; i++){
                     if($scope.trees[i].id==data.id){
                     return i;
                     }
                     }
                     };

                     //数据替换
                     $scope.trees.splice(location(data,$scope.trees),1,data);
                     $scope.allTrees.splice(location(data,$scope.allTrees),1,data);*/
                });
            };

            //新建树节点
            $scope.addTree = function (tree) {

                $scope.questiontag={};
                if(tree != null){
                    $scope.questiontag = {
                        parentQuestionTag :questiontag.name,
                        parentId :questiontag.id
                    };
                }else{
                    $scope.questiontag = {
                        parentQuestionTag  :"",
                        parentId :""
                    };
                }
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "treeEidt.html",
                    controller:TreeEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.questiontag;
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    console.log(data);
                    //获取父级位置
                    var location = function(data,dataList){
                        for(var i=0; i < dataList.length; i++){
                            if(dataList[i].id==data.parentId){
                                return  i;
                            }
                        }
                    };
                    /**
                     * 获取 下一个父级位置
                     * @param data 当前数据
                     * @returns {number} 返回位置
                     */
                    /*  var locationNext = function(data,dataList){
                     var index = 0;
                     for(var i=0; i < dataList.length; i++){
                     index ++;
                     //data.parentId
                     if(dataList[i].id==data.parentId){
                     break;
                     }
                     }

                     for(var k = index ; k < dataList.length; k++){
                     //data.parentId
                     if(dataList[k].level===dataList[location(data,dataList)].level){
                     if(dataList[k].parentId===dataList[location(data,dataList)].parentId){
                     return k;
                     }
                     }
                     }
                     return dataList.length;
                     };*/
                    var locationEndChild=function(index,treeList){
                        for(var i=treeList.length-1;i>=0; i--){
                            if(treeList[index].id==treeList[i].parentId){
                                return locationEndChild(i,treeList);
                            }
                        }
                        return index;
                    };

                    if(data.parentId==""){
                        //增加顶级树
                        data.childState = false;
                        data.collapsed = false;
                        data.visable = true;
                        data.level=0;
                        $scope.trees.push(data);
                        $scope.allTrees.push(data);

                        var parentIndex=0;
                        angular.forEach($scope.trees,function(tree){
                            if(tree.level == 0){
                                if(parentIndex%2==0){
                                    tree.color="color-blue";
                                }else{
                                    tree.color="color-yellow";
                                }
                                parentIndex++;
                            }
                        });
                    }else{

                        //增加子级树
                        $scope.trees[location(data,$scope.trees)].childState = true;
                        $scope.trees[location(data,$scope.trees)].collapsed = false;

                        for(var i=0;i<$scope.trees.length; i++){
                            if($scope.trees[i].parentId===data.parentId){
                                $scope.trees[i].visable=true;
                            }
                        }

                        data.childState = false;
                        data.collapsed = false;
                        data.visable = true;
                        data.level =  $scope.trees[location(data,$scope.trees)].level+1;

                        $scope.trees.splice(locationEndChild(location(data,$scope.trees),$scope.trees)+1,0,data);
                        $scope.allTrees.splice(locationEndChild(location(data,$scope.allTrees),$scope.allTrees)+1,0,data);
                    }
                });
            };

            //树搜索
            $scope.treeSearch = function () {
                $scope.organizationSearch = [];
                if($scope.questiontag != null){
                    $scope.SearchName($scope.allTrees,$scope.questiontag);
                } else{
                    angular.extend($scope.organizationSearch,$scope.allTrees);
                }
                $scope.trees = $scope.organizationSearch;
            };
            $scope.SearchName = function (data,searchText) {
                var searchLength = searchText.length;
                var jsonArray = data;
                for(var i=0 ;i<jsonArray.length ; i++ ){
                    var jsonObject = jsonArray[i];
                    var name = jsonObject.name;
                    var nameLength = name.length;
                    var flag = false;
                    for(var temp=0;temp< (nameLength-searchLength+1);temp++){
                        if(searchText == name.substring(temp,temp+searchLength)){
                            flag = true;
                            break;
                        }
                    }
                    if(flag){
                        var j = 0 ;
                        if(jsonObject.parentId != null){
                            var parentList = [];
                            getParent(jsonObject.parentId,parentList)
                            for(j = parentList.length-1; j >= 0 ;j--){
                                parentList[j].collapsed = false;
                                parentList[j].visable = true;
                                $scope.organizationSearch.push(parentList[j]);
                            }
                        }
                        var tempObj = {};
                        angular.extend(tempObj,jsonObject);
                        var childList = [];
                        countChild(jsonObject.id,childList);
                        if(childList.length == 0){
                            tempObj.collapsed = false;
                            tempObj.visable = true;
                            $scope.organizationSearch.push(tempObj);
                        } else {
                            tempObj.collapsed = true;
                            tempObj.visable = true;
                            $scope.organizationSearch.push(tempObj);
                            for(j = 0; j < childList.length ;j++){
                                $scope.organizationSearch.push(childList[j]);
                            }
                            i =  i + childList.length;
                        }
                    }
                }
            };



            $scope.clean = function(){
                $scope.organization = null;
            };
        }]);
    /**
     * 导入组织时显示错误的控制器
     * @type {*[]}
     */
    var ErrorController =["$scope","$modalInstance","items",
        function ($scope, $modalInstance,items) {
            $scope.errors=items.errors;
            $scope.download=function(){
                $scope.url=items.url;
                window.open($scope.url,"_self");
                $modalInstance.dismiss('cancel');
            };
            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
        }];



    var TreeEidt = ["$scope","$modalInstance","items","PlatformService","dialogService",
        function ($scope, $modalInstance, items,PlatformService,dialogService) {
            $scope.$emit('navShow',3);
                   // console.log($scope);    $scope.org = items;
            $scope.questiontag = items;
            if($scope.questiontag.id == null){
                if($scope.questiontag.parentId == ""){
                  $scope.questiontag.title = "增加问题标签";
                }else{
                    $scope.questiontag.title =$scope.questiontag.parentQuestionTag +"新增子组织";
                }

            } else {
                $scope.questiontag.title ="编辑问题标签";
                /*PlatformService.createSettingQuestionTag().success(function(data){
                    if(data.errors === null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        $scope.organisationList = data.result
                        for(var i=0;i<$scope.organisationList.length;i++){
                            if($scope.organisationList[i].id == $scope.questiontag.id){
                                $scope.organisationList.splice(i,1);
                                break;
                            }
                        }
                    }
                });*/
            }

            //数据加载
            $scope.getOwner=function(val){
                var searchParmeter = {
                    isActive : true,
                    questiontag : val,
                    pageSize : 10,
                    pageNumber : 1
                };
                //sensor: false
                PlatformService.getSettingQuestionTagAllList(searchParmeter).then(function(res){
                    var owners = [];
                    console.log(res.data);
                    angular.forEach(res.data.result, function(item){
                        owners.push(item);
                    });
                    return owners;

                });
            };

            //移动标记
            var isMove=false;
            //鼠标位置
            var x,y;
            $scope.mousedown=function(e){
                isMove=true;
                var dialog=$(".modal-dialog");
                if(dialog.css("top")=="auto"){
                    x=e.pageX;
                    y=e.pageY;
                }else{
                    x=e.pageX-parseInt(dialog.css("left"));
                    y=e.pageY-parseInt(dialog.css("top"));
                }
            };
            $scope.mousemove=function(e){
                if(isMove){
                    var left=e.pageX-x;
                    var top=e.pageY-y;
                    $(".modal-dialog").css({top:top,left:left});
                }
            };
            $scope.mouseup=function(){
                isMove=false;
            };

            $scope.doSave = function() {
                $scope.questiontag.tagRgb=document.getElementById("nowColor").value;
                console.log($scope.questiontag);
                if($scope.questiontag.id == null){
                    //新建
                    PlatformService.createSettingQuestionTag($scope.questiontag).success(function(data){
                        $scope.validateForm.$errors = [];
                        if(data.errors === null || data.errors.length > 0){
                            for(var i=0;i<data.errors.length;i++){
                                $scope.validateForm.$errors.push(data.errors[i].message);
                            }
                        }else{
                            //返回id
                            $scope.questiontag.id = data.id;
                            dialogService.tip([{"message": "保存成功！"}]);
                            //关闭
                            $modalInstance.close($scope.questiontag);
                            //清空数据
                            $scope.questiontag={};
                            window.location.reload();
                        }
                    }) ;
                } else {
                    //编辑
                    PlatformService.updateSettingQuestionTag($scope.questiontag).success(function(data){
                        $scope.validateForm.$errors = [];
                        if(data.errors === null || data.errors.length > 0){
                            for(var i=0;i<data.errors.length;i++){
                                $scope.validateForm.$errors.push(data.errors[i].message);
                            }
                        }else{
                            dialogService.tip([{"message": "保存成功！"}]);
                            //关闭
                            $modalInstance.close($scope.questiontag);
                            //清空数据
                            $scope.questiontag={};
                            window.location.reload();
                        }
                    }) ;
                }

            };


            $scope.clean = function () {
                $scope.questiontag = {};
                $modalInstance.dismiss('cancel');
                if(document.getElementById("colorBoard")){
                    document.body.removeChild(document.getElementById("colorBoard"));
                }
            };

            $scope.closeAlert = function (index,form) {
                form.splice(index,1);
            };
        }];

})();
/**
 * Created by xiniu on 9/22 0022.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.repository",[]);
    app.controller("RepositoryIndexController", ["$scope", "$http","$modal" ,"ServiceService","PlatformService", "dialogService",
        function ($scope,$http,$modal,ServiceService,PlatformService, dialogService) {
            $scope.$emit('navShow',1);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                sourceTypes: ["SHOWCAL", "PLADMIN"]
            };

            $scope.startDate = false;
            $scope.endDate = false;

            //弹出式日历触发函数
            $scope.openStartDate = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.startDate = true;
            };
            //弹出式日历触发函数
            $scope.openEndDate = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.endDate = true;
            };

            var thisParameter = {};
            PlatformService.getSettingQuestionTagAllList(thisParameter).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.questionTagList = data.result;
                    for (var i = 0; i < $scope.questionTagList.length; i++) {
                        if($scope.repository){
                            if ($scope.questionTagList[i].id == $scope.repository.id) {
                                $scope.questionTagList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            });
            PlatformService.getSettingKeywordAllList(thisParameter).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.keywordList = data.result;
                    for (var i = 0; i < $scope.keywordList.length; i++) {
                        if($scope.repository){
                            if ($scope.keywordList[i].id == $scope.repository.id) {
                                $scope.keywordList.splice(i, 1);
                                break;
                            }
                        }
                    }
                }
            });

            $scope.pagedResult = [];
            /**
             * 搜索用户列表
             */
            $scope.getList = function () {
                $scope.vm.tageIds = [];
                $scope.vm.keywords = [];
                if($scope.vm.tagObj){
                    $scope.vm.tageIds.push($scope.vm.tagObj);
                }
                if($scope.vm.keywordObj){
                    $scope.vm.keywords.push($scope.vm.keywordObj);
                }
                ServiceService.findRepository($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.pagedResult = data.result;
                        $scope.vm.totalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip(msg);
                    }
                });
            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;

                if ($scope.vm.startDate instanceof Date) {
                    $scope.vm.startDate = $scope.vm.startDate.format("yyyy-MM-dd");
                }
                if ($scope.vm.endDate instanceof Date) {
                    $scope.vm.endDate = $scope.vm.endDate.format("yyyy-MM-dd");
                }

                $scope.getList();
            };
            $scope.doSearch();

            //新增
            $scope.addRepository = function (repository) {
                $scope.repository={};
                //复制
                angular.extend($scope.repository ,repository);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "repositoryEidt.html",
                    controller:TreeEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.repository;
                        }
                    }
                });
            };

            //编辑
            $scope.edit = function (repository) {
                $scope.repository={};
                //复制

                angular.extend($scope.repository ,repository);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "repositoryEidt.html",
                    controller:TreeEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.repository;
                        }
                    }
                });
                modalInstance.result.then(function (data){
                    window.location.reload();
                });
            };

            //删除
            $scope.delete = function(repository) {
                var dialogDefaults = {
                    size:"sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除这条知识吗？",
                    type:"delete",
                    callback: function () {
                        ServiceService.deleteRepository({id:repository.id}).success(function(data){
                            if(data.errors === null || data.errors.length > 0){
                                dialogService.tip(data.errors);
                            }else{
                                dialogService.tip([{"message":"删除成功！" }]);
                                window.location.reload();
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);
            };

            // 发布
            $scope.active = function(repository){
                ServiceService.activeRepository({id:repository.id}).success(function(data){
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([
                            {"message": "发布成功！" }
                        ],"index.htm");
                    }
                });
            };

            // 取消发布
            $scope.inactive = function(repository){
                ServiceService.inactiveRepository({id:repository.id}).success(function(data){
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([
                            {"message": "取消发布成功！" }
                        ],"index.htm");
                    }
                });
            };

            // 转至系统知识库
            $scope.toPlatform = function(repository){
                ServiceService.toPlatformRepository({id:repository.id}).success(function(data){
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([
                            {"message": "转至系统知识库成功！" }
                        ],"index.htm");
                    }
                });
            };

            // 转回瘦咖知识库
            $scope.toShowcal = function(repository){
                ServiceService.toShowcalRepository({id:repository.id}).success(function(data){
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([
                            {"message": "转回瘦咖知识库成功！" }
                        ],"index.htm");
                    }
                });
            };

            var TreeEidt = ["$scope","$modalInstance","items","ServiceService","PlatformService","dialogService",
                function ($scope, $modalInstance, items,ServiceService,PlatformService,dialogService) {
                    $scope.$emit('navShow',1);
                    $scope.repository = items;

                   // $scope.repository.title = "新增知识库";
                    if($scope.repository.id == null){
                            $scope.repository.title = "增加知识库";
                    } else {
                        $scope.repository.title ="编辑知识库";
                    }
                    var thisParameter={};
                    PlatformService.getSettingQuestionTagAllList(thisParameter).success(function(data){
                        if(data.errors === null || data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            for(var i=0;i< data.result.length;i++){
                                if(data.result[i].id && data.result[i].parentId){
                                    data.result[i].pid= data.result[i].parentId;
                                    data.result[i].name= data.result[i].tag;
                                }else if(data.result[i].id && (data.result[i].parentId==null||data.result[i].parentId==undefined)){
                                    data.result[i].name= data.result[i].tag;
                                }
                            }
                            $scope.questionTagList = data.result;
                            for(var i=0;i<$scope.questionTagList.length;i++){
                                if($scope.questionTagList[i].id == $scope.repository.id){
                                    $scope.questionTagList.splice(i,1);
                                    break;
                                }
                            }
                        }
                    });
                    PlatformService.getSettingKeywordAllList(thisParameter).success(function(data){
                        if(data.errors === null || data.errors.length > 0){
                            dialogService.tip(data.errors);
                        }else{
                            for(var i=0;i< data.result.length;i++){
                                if(data.result[i].id && data.result[i].parentId){
                                    data.result[i].pid= data.result[i].parentId;
                                    data.result[i].name= data.result[i].keyword;
                                }else if(data.result[i].id && (data.result[i].parentId==null||data.result[i].parentId==undefined)){
                                    data.result[i].name= data.result[i].parentKeyword;
                                }
                            }
                            $scope.keywordList = data.result;
                            console.log( $scope.keywordList);
                            for(var i=0;i<$scope.keywordList.length;i++){
                                if($scope.keywordList[i].id == $scope.repository.id){
                                    $scope.keywordList.splice(i,1);
                                    break;
                                }
                            }

                        }
                    });
                    $scope.doSave = function() {
                        $scope.repository.type = "PLATFORM" ;
                        if($scope.repository.id == null){
                            //新建
                            ServiceService.createRepository($scope.repository).success(function(data){
                                $scope.validateForm.$errors = [];
                                if(data.errors === null || data.errors.length > 0){
                                    for(var i=0;i<data.errors.length;i++){
                                        $scope.validateForm.$errors.push(data.errors[i].message);
                                    }
                                }else{
                                    //返回id
                                    $scope.repository.id = data.id;
                                    dialogService.tip([{"message": "保存成功！"}]);
                                    //关闭
                                    $modalInstance.close($scope.repository);
                                    //清空数据
                                    $scope.repository={};
                                    window.location.reload();
                                }
                            }) ;
                        } else {
                            //编辑
                            ServiceService.updateRepository($scope.repository).success(function(data){
                                $scope.validateForm.$errors = [];
                                if(data.errors === null || data.errors.length > 0){
                                    for(var i=0;i<data.errors.length;i++){
                                        $scope.validateForm.$errors.push(data.errors[i].message);
                                    }
                                }else{
                                    dialogService.tip([{"message": "保存成功！"}]);
                                    //关闭
                                    $modalInstance.close($scope.repository);
                                    //清空数据
                                    $scope.repository={};
                                }
                            }) ;
                        }
                    };

                    $scope.clean = function () {
                        $scope.disease = {};
                        $modalInstance.dismiss('cancel');
                    };
                }
            ];
        }
    ]);

    // 批量导入数据
    app.controller("RepositoryImportController", ["$scope", "$http","$modal", "ServiceService", "dialogService",
        function ($scope, $http, $modal, ServiceService, dialogService) {
            $scope.$emit('navShow', 1);
            $scope.errorOpen = function (errors,url) {
                $scope.result={};
                $scope.result.errors=errors;
                $scope.result.url=url;
                var modalInstance = $modal.open({
                    templateUrl: "errors.html",
                    controller: ErrorCtrl,
                    resolve: {
                        items: function () {
                            return  $scope.result;
                        }
                    }
                });
                modalInstance.result.then(function () {
                }, function () {
                });
            };
            $scope.upFileClick=function(){
                var upImportFileId=document.getElementById("upImportFileId");
                upImportFileId.onchange=function(){
                    var upImportFile;
                    var upImportFileList =upImportFileId.files;
                    var upImportFilename;
                    if(upImportFileList){
                        upImportFile = upImportFileList[0];
                        upImportFilename=upImportFile.name;
                    }else{
                        upImportFilename =upImportFileId.value;
                    }
                    var str =upImportFilename.substr(upImportFilename.indexOf(".")+1);
                    if(!(str=="xls" || str=="xlsx" || str=="et")){
                        $("#upImportFile").val("");
                        dialogService.tip([{"message":"请上传Excel支持的文件(xls,xlsx,et等)！" }]);
                    }else{
                        $("#upImportFile").val(upImportFilename);
                    }
                };

            };
            // 上传
            $scope.upFileSave=function(){
                var file = document.getElementById("upImportFileId").files[0];
                console.log(file);
                if(!file){
                    dialogService.tip([{"message": "请上传文件！"}]);
                    return;
                }
                ServiceService.apiRepositoryImport(file).success(function(data){
                    if(data.errors == null || data.errors.length > 0){
                        dialogService.tip(data.errors);
                    }else{
                        dialogService.tip([{"message": "导入成功！"}]);
                    }
                });
            };

            // 下载模版
            $scope.downloadTemplate=function(){
                ServiceService.apiRepositoryOutputTemplate().success(function(data){
                    if(data.errors == null || data.errors.length > 0){
                        //$scope.errorOpen(data.errors,data.url);
                    }else{
                        window.open(data.url,"_self");
                    }
                });
            };
        }]);

    var ErrorCtrl =["$scope","$modalInstance","items",
        function ($scope, $modalInstance,items) {
            $scope.errors=items.errors;
            $scope.url=items.url;
            $scope.download=function(){
                window.open($scope.url,"_self");
                $modalInstance.dismiss('cancel');
            };
            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
            //关闭错误
            $scope.closeAlert = function (index,form) {
                form.splice(index,1);
            };
        }];

})();
/**
 * Created by xiniu on 9/22 0022.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.sportscheme", []);
    app.controller("sportSchemeIndexController", ["$scope", "$http", "$modal" , "ThermalControlService", "dialogService",
        function ($scope, $http, $modal, ThermalControlService, dialogService) {
            $scope.$emit('navShow', 2);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 20,
                sourceTypes: ["SHOWCAL", "PLADMIN"]
            };
            $scope.headResult = [];
            $scope.isInjuryJoins = [
                {name: '是'},
                {name: '否'}
            ];
            $scope.defaultJoin = '是';
            /**
             * 搜索用户列表
             */
            $scope.getList = function () {
                ThermalControlService.findSportHead($scope.vm).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.headResult = data.result;
                        $scope.vm.headTotalCount = data.totalCount;
                        for(var i=0 ;i< $scope.headResult.length;i++){
                            $scope.headResult[i].showColor="";
                        }
                    }
                });
            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;
                $scope.getList();
            };
            $scope.doSearch();

            //新增
            $scope.addSportHead = function (sportHead) {
                $scope.sportHead = {};

                //复制
                angular.extend($scope.sportHead, sportHead);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sportHeadEidt.html",
                    controller: HeadEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return $scope.sportHead;
                        }
                    }
                });
            };

            //编辑
            $scope.edit = function (sportHead) {
                $scope.sportHead = {};
                //复制
                angular.extend($scope.sportHead, sportHead);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sportHeadEidt.html",
                    controller: HeadEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return $scope.sportHead;
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    window.location.reload();
                });
            };
            $scope.selectHead = {};
            $scope.showLine = function (head,index) {
                for(var i=0 ;i< $scope.headResult.length;i++){
                    $scope.headResult[i].showColor="";
                }
                $scope.headResult[index].showColor = "border:#449d44 2px solid";
                $scope.selectHead = head;
                ThermalControlService.getSportLineAllList({headId: head.id}).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.sportlines = data.result;
                        $scope.vm.linetotalCount = data.totalCount;
                    }
                });
            };
            /**
             * 编辑行信息
             * @param line
             */
            $scope.editline = function (line) {
                if(!$scope.selectHead){
                    dialogService.tip([
                        {"message": "请选择运动方案，添加明细！" }
                    ]);
                }
                $scope.sportline = {};
                //复制
                angular.extend($scope.sportline, line);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sportStepEdit.html",
                    controller: sportlineEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return [$scope.selectHead, $scope.sportline];
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    window.location.reload();
                });
            }
            $scope.createline = function(){
                console.log($scope.selectHead);
                if($scope.selectHead.id==null){
                    dialogService.tip([
                        {"message": "请选择运动方案，添加明细！" }
                    ]);
                    return false;
                }
                $scope.sportline = {};
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sportStepEdit.html",
                    controller: sportlineEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return [$scope.selectHead, $scope.sportline];
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    window.location.reload();
                });
            }
            /**
             * 删除行信息
             * @param lineId
             */
            $scope.deleteline = function (lineId) {
                var dialogDefaults = {
                    size: "sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除运动方案步骤吗？",
                    type: "delete",
                    callback: function () {
                        ThermalControlService.deleteSportLine({id: lineId}).success(function (data) {
                            if (data.errors === null || data.errors.length > 0) {
                                dialogService.tip(data.errors);
                            } else {
                                dialogService.tip([
                                    {"message": "删除成功！" }
                                ]);
                                window.location.reload();
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);
            }

            //删除
            $scope.delete = function (sportHead) {
                var dialogDefaults = {
                    size: "sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除这个方案吗？",
                    type: "delete",
                    callback: function () {
                        ThermalControlService.deleteSportHead({id: sportHead.id}).success(function (data) {
                            if (data.errors === null || data.errors.length > 0) {
                                dialogService.tip(data.errors);
                            } else {
                                dialogService.tip([
                                    {"message": "删除成功！" }
                                ]);
                                window.location.reload();
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);
            };
            /**
             * 行编辑选择框
             * @type {*[]}
             */
            var sportlineEidt = ["$scope", "$modalInstance", "items", "ThermalControlService", "dialogService",
                function ($scope, $modalInstance, items, ThermalControlService, dialogService) {
                    $scope.$emit('navShow', 2);
                    $scope.sporthead = items[0];
                    $scope.sportline = items[1];
                    $scope.sportline.title = '运动方案 ' + $scope.sporthead.name;
                    $scope.vm = {};
                    //获取设置信息
                    ThermalControlService.getSportSettingAllList({pageSize: 0}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            $scope.sportsettings = data.result;
                        }
                    });

                    $scope.dolineSave = function () {
                        if ($scope.sportline.id == null) {
                            //新建Setting
                            $scope.sportline.headId=items[0].id;
                            ThermalControlService.createSportLine($scope.sportline).success(function (data) {
                                if (data.errors === null ||
                                    data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    ThermalControlService.getSportLineAllList({headId: $scope.sporthead.id}).success(function (data) {
                                        if (data.errors === null || data.errors.length > 0) {
                                            dialogService.tip(data.errors);
                                        } else {
                                            $scope.sportlines = data.result;
                                            $scope.vm.linetotalCount = data.totalCount;
                                        }
                                        //关闭
                                        $modalInstance.close($scope.sportHead);
                                    });
                                }
                            });

                        } else {
                            //编辑
                            ThermalControlService.updateSportLine($scope.sportline).success(function (data) {
                                if (data.errors === null || data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    //检查方案总时长并更新
                                    ThermalControlService.getSportLineAllList({headId: $scope.sporthead.id}).success(function (data) {
                                        if (data.errors === null || data.errors.length > 0) {
                                            dialogService.tip(data.errors);
                                        } else {
                                            $scope.sportlines = data.result;
                                            $scope.vm.linetotalCount = data.totalCount;

                                        }
                                        //关闭
                                        $modalInstance.close($scope.sportHead);
                                    });
                                }
                            });
                        }
                    }

                    $scope.clean = function () {
                        $scope.disease = {};
                        $modalInstance.dismiss('cancel');
                    };
                }]


            var HeadEidt = ["$scope", "$modalInstance", "items", "ThermalControlService", "dialogService",
                function ($scope, $modalInstance, items, ThermalControlService, dialogService) {
                    $scope.$emit('navShow', 2);
                    $scope.sportHead = items;

                    $scope.sportIntensities = [
                        {id: 'LOW', name: '低'},
                        {id: 'MIDDLE', name: '中'},
                        {id: 'HEIGHT', name: '高'}
                    ];

                    $scope.sportPlaces = [
                        {id: 'HOME', name: '住所'},
                        {id: 'OUTDOORS', name: '户外'},
                        {id: 'GYM', name: '健身房'}
                    ];

                    $scope.sportTimes = [
                        {id: 15, name: '15分钟'},
                        {id: 30, name: '30分钟'},
                        {id: 45, name: '45分钟'},
                        {id: 60, name: '60分钟'}
                    ];

                    // $scope.sportHead.title = "新增知识库";
                    $scope.couldJoin = [
                        {value: 'true', name: '是'},
                        {value: 'false', name: '否'}
                    ];
                    $scope.doSave = function () {
                        if ($scope.sportHead.id == null) {
                            //新建
                            ThermalControlService.createSportHead($scope.sportHead).success(function (data) {
                                if (data.errors === null ||
                                    data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    //返回id
                                    $scope.sportHead.id = data.id;
                                    dialogService.tip([
                                        {"message": "保存成功！"}
                                    ]);
                                    //关闭
                                    $modalInstance.close($scope.sportHead);
                                    //清空数据
                                    $scope.sportHead = {};
                                    window.location.reload();
                                }
                            });
                        } else {
                            //编辑
                            ThermalControlService.updateSportHead($scope.sportHead).success(function (data) {

                                if (data.errors === null || data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    dialogService.tip([
                                        {"message": "保存成功！"}
                                    ]);
                                    //关闭
                                    $modalInstance.close($scope.sportHead);
                                    //清空数据
                                    $scope.sportHead = {};
                                }
                            });
                        }
                    };

                    $scope.clean = function () {
                        $scope.disease = {};
                        $modalInstance.dismiss('cancel');
                    };
                }
            ];

        }
    ]);


    //sportstep
    app.controller("sportsStepController", ["$scope", "$http", "$modal" , "$location", "ThermalControlService", "dialogService", "toolsService",
        function ($scope, $http, $modal, $location, ThermalControlService, dialogService, toolsService) {
            $scope.$emit('navShow', 2);
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                sourceTypes: ["SHOWCAL", "PLADMIN"]
            };
            $scope.headId = toolsService.parameter("id", $location.absUrl());
            $scope.getList = function () {
                ThermalControlService.getSportLineAllList({headId: $scope.headId}).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.lineResult = data.result;
                        $scope.vm.lineTotalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip(msg);
                    }
                });
            };
            $scope.getList();
            //新增具体步骤
            $scope.addSportLine = function () {
                $scope.sportLine = {
                    headId: $scope.headId,
                    title: "新增运动步骤"
                };
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sportStepEdit.html",
                    controller: LineEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return $scope.sportLine;
                        }
                    }
                });
            };

            //编辑Line
            $scope.editLine = function (sportLine) {
                $scope.sportLine = {};
                //复制
                angular.extend($scope.sportLine, sportLine);
                $scope.sportLine.title = "编辑运动步骤";
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sportStepEdit.html",
                    controller: LineEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return $scope.sportLine;
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    window.location.reload();
                });
            };

            //删除Line
            $scope.deleteLine = function (sportLine) {
                var dialogDefaults = {
                    size: "sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除这个步骤吗？",
                    type: "delete",
                    callback: function () {
                        ThermalControlService.deleteSportLine({id: sportLine.id}).success(function (data) {
                            if (data.errors === null || data.errors.length > 0) {
                                dialogService.tip(data.errors);
                            } else {
                                dialogService.tip([
                                    {"message": "删除成功！" }
                                ]);
                                var headId = {headId: sportLine.headId};
                                var totalTime = 0;
                                ThermalControlService.getSportLineAllList(headId).success(function (allLineData) {
                                    if (allLineData.errors === null || allLineData.errors.length > 0) {
                                        dialogService.tip(allLineData.errors);
                                    } else {
                                        var allLineList = allLineData.result;

                                        for (var i = 0; i < allLineList.length; i++) {
                                            totalTime += allLineList[i].time;
                                        }
                                        $scope.totalTime = totalTime;
                                        var headInfo = {id: allLineData.result[0].headId, totalTime: totalTime};
                                        ThermalControlService.updateSportHead(headInfo).success(function (isSuccessResult) {
                                            if (isSuccessResult.errors === null || isSuccessResult.errors.length > 0) {
                                                dialogService.tip(isSuccessResult.errors);
                                            } else {
                                                dialogService.tip([
                                                    {"message": "保存成功！"}
                                                ]);
                                                //关闭
                                                $modalInstance.close($scope.sportLine);
                                                //清空数据
                                                $scope.sportLine = {};
                                                $scope.totalTime = 0;
                                            }
                                        });
                                    }
                                });
                                window.location.reload();
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);
            };


            var LineEidt = ["$scope", "$modalInstance", "items", "ThermalControlService", "dialogService",
                function ($scope, $modalInstance, items, ThermalControlService, dialogService) {
                    $scope.$emit('navShow', 2);
                    $scope.sportLine = items;
                    $scope.sportTimes = [
                        {name: '15'},
                        {name: '30'},
                        {name: '45'},
                        {name: '60'}
                    ];
                    //
                    ThermalControlService.getSportSettingAllList($scope.vm).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            $scope.organisationList = data.result;
                            for (var i = 0; i < $scope.organisationList.length; i++) {
                                if ($scope.organisationList[i].id == $scope.sportLine.id) {
                                    $scope.organisationList.splice(i, 1);
                                    break;
                                }
                            }
                        }
                    });
                    ThermalControlService.getSportHead({id: $scope.sportLine.headId}).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            $scope.sportLine.name = data.sportHead.name;
                        }
                    });
                    $scope.totalTime = 0;

                    $scope.doSave = function () {
                        if ($scope.sportLine.id == null) {
                            //新建Setting
                            ThermalControlService.createSportLine($scope.sportLine).success(function (data) {
                                if (data.errors === null ||
                                    data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    //返回id
                                    $scope.sportLine.id = data.id;
                                    //检查方案总时长并更新
                                    var headId = {headId: $scope.sportLine.headId};
                                    var totalTime = 0;
                                    ThermalControlService.getSportLineAllList(headId).success(function (allLineData) {
                                        if (allLineData.errors === null || allLineData.errors.length > 0) {
                                            dialogService.tip(allLineData.errors);
                                        } else {
                                            var allLineList = allLineData.result;

                                            for (var i = 0; i < allLineList.length; i++) {
                                                totalTime += allLineList[i].time;
                                            }
                                            $scope.totalTime = totalTime;
                                            var headInfo = {id: allLineData.result[0].headId, totalTime: totalTime};
                                            ThermalControlService.updateSportHead(headInfo).success(function (isSuccessResult) {
                                                if (isSuccessResult.errors === null || isSuccessResult.errors.length > 0) {
                                                    dialogService.tip(isSuccessResult.errors);
                                                } else {
                                                    dialogService.tip([
                                                        {"message": "保存成功！"}
                                                    ]);
                                                    //关闭
                                                    $modalInstance.close($scope.sportLine);
                                                    //清空数据
                                                    $scope.sportLine = {};
                                                    $scope.totalTime = 0;
                                                }
                                                window.location.reload();
                                            });
                                        }
                                    });
                                }
                            });

                        } else {
                            //编辑
                            ThermalControlService.updateSportLine($scope.sportLine).success(function (data) {

                                if (data.errors === null || data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    //检查方案总时长并更新
                                    var headId = {headId: $scope.sportLine.headId};
                                    var totalTime = 0;
                                    ThermalControlService.getSportLineAllList(headId).success(function (allLineData) {
                                        if (allLineData.errors === null || allLineData.errors.length > 0) {
                                            dialogService.tip(allLineData.errors);
                                        } else {
                                            var allLineList = allLineData.result;

                                            for (var i = 0; i < allLineList.length; i++) {
                                                totalTime += allLineList[i].time;
                                            }
                                            $scope.totalTime = totalTime;
                                            var headInfo = {id: allLineData.result[0].headId, totalTime: totalTime};
                                            ThermalControlService.updateSportHead(headInfo).success(function (isSuccessResult) {
                                                if (isSuccessResult.errors === null || isSuccessResult.errors.length > 0) {
                                                    dialogService.tip(isSuccessResult.errors);
                                                } else {
                                                    dialogService.tip([
                                                        {"message": "保存成功！"}
                                                    ]);
                                                    //关闭
                                                    $modalInstance.close($scope.sportLine);
                                                    //清空数据
                                                    $scope.sportLine = {};
                                                    $scope.totalTime = 0;
                                                }
                                                window.location.reload();
                                            });
                                        }
                                    });
                                }
                            });
                        }
                    };
                    $scope.clean = function () {
                        $scope.disease = {};
                        $modalInstance.dismiss('cancel');
                    };
                    $scope.closeAlert = function (index, form) {
                        form.splice(index, 1);
                    };
                }
            ];
        }
    ]);
    //一对多导入
    app.controller("SportHeadImportController", ["$scope", "$http", "$modal" ,  "$location","toolsService","ThermalControlService", "dialogService", function ($scope, $http, $modal, $location, toolsService,ThermalControlService, dialogService) {
        $scope.$emit('navShow', 2);
        $scope.tabShow = toolsService.parameter("tabShow", $location.absUrl());
        $scope.errorOpen = function (errors, url) {
            $scope.result = {};
            $scope.result.errors = errors;
            $scope.result.url = url;
            var modalInstance = $modal.open({
                templateUrl: "errors.html",
                controller: ErrorController,
                resolve: {
                    items: function () {
                        return $scope.result;
                    }
                }
            });
            modalInstance.result.then(function () {
            }, function () {
            });
        };
        $scope.upFileClick=function(){
            var upImportFileId=document.getElementById("upImportFileId");
            upImportFileId.onchange=function(){
                var upImportFile;
                var upImportFileList =upImportFileId.files;
                var upImportFilename;
                if(upImportFileList){
                    upImportFile = upImportFileList[0];
                    upImportFilename=upImportFile.name;
                }else{
                    upImportFilename =upImportFileId.value;
                }
                var str =upImportFilename.substr(upImportFilename.indexOf(".")+1);
                if(!(str=="xls" || str=="xlsx" || str=="et")){
                    $("#upImportFile").val("");
                    dialogService.tip([{"message":"请上传Excel支持的文件(xls,xlsx,et等)！" }]);
                }else{
                    $("#upImportFile").val(upImportFilename);
                }
            };

        };
        $scope.upFileSave = function () {
            var file = document.getElementById("upImportFileId").files[0];
            ThermalControlService.apiSportHeadImport(file).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    if (data.errors.length > 10) {
                        data.errors = data.errors.slice(0, 9);
                    }
                    $scope.errorOpen(data.errors, data.url);
                } else {
                    dialogService.tip([
                        {"message": "导入成功！"}
                    ], "sportscheme");
                }
            });
        };
        $scope.downloadTemplate = function () {
            ThermalControlService.apiSportHeadTemplate().success(function (data) {
                if (data.errors == null || data.errors.length > 0) {
                    $scope.errorOpen(data.errors, data.url);
                } else {
                    window.open(data.url, "_self");
                }
            });
        };
    }
        ]);
    app.controller("SportLineImportController", ["$scope", "$http", "$modal" ,  "$location","toolsService","ThermalControlService", "dialogService", function ($scope, $http, $modal, $location, toolsService,ThermalControlService, dialogService) {
        $scope.$emit('navShow', 2);
        $scope.tabShow = toolsService.parameter("tabShow", $location.absUrl());
        $scope.errorOpen = function (errors, url) {
            $scope.result = {};
            $scope.result.errors = errors;
            $scope.result.url = url;
            var modalInstance = $modal.open({
                templateUrl: "errors.html",
                controller: ErrorController,
                resolve: {
                    items: function () {
                        return $scope.result;
                    }
                }
            });
            modalInstance.result.then(function () {
            }, function () {
            });
        };
        $scope.upFileClick=function(){
            var upImportFileId=document.getElementById("upImportFileId");
            upImportFileId.onchange=function(){
                var upImportFile;
                var upImportFileList =upImportFileId.files;
                var upImportFilename;
                if(upImportFileList){
                    upImportFile = upImportFileList[0];
                    upImportFilename=upImportFile.name;
                }else{
                    upImportFilename =upImportFileId.value;
                }
                var str =upImportFilename.substr(upImportFilename.indexOf(".")+1);
                if(!(str=="xls" || str=="xlsx" || str=="et")){
                    $("#upImportFile").val("");
                    dialogService.tip([{"message":"请上传Excel支持的文件(xls,xlsx,et等)！" }]);
                }else{
                    $("#upImportFile").val(upImportFilename);
                }
            };

        };
        $scope.upFileSave = function () {
            var file = document.getElementById("upImportFileId").files[0];
            ThermalControlService.apiSportLineImport(file).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    if (data.errors.length > 10) {
                        data.errors = data.errors.slice(0, 9);
                    }
                    $scope.errorOpen(data.errors, data.url);
                } else {
                    dialogService.tip([
                        {"message": "导入成功！"}
                    ], "sportscheme");
                }
            });
        };
        $scope.downloadTemplate = function () {
            ThermalControlService.apiSportLineTemplate().success(function (data) {
                if (data.errors == null || data.errors.length > 0) {
                    $scope.errorOpen(data.errors, data.url);
                } else {
                    window.open(data.url, "_self");
                }
            });
        };
    }
    ]);

    var ErrorController = ["$scope", "$modalInstance", "items",
        function ($scope, $modalInstance, items) {
            //$scope.$emit('navShow', 3);
            $scope.errors = items.errors;
            $scope.url = items.url;
            $scope.download = function () {
                window.open($scope.url, "_self");
                $modalInstance.dismiss('cancel');
            };
            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
            //关闭错误
            $scope.closeAlert = function (index, form) {
                form.splice(index, 1);
            };
        }];
})();
/**
 * Created by xiniu on 9/22 0022.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.sportSetting",[]);
    app.controller("sportSettingIndexController", ["$scope", "$http","$modal" ,"ThermalControlService","FoundationService", "dialogService",
        function ($scope,$http,$modal,ThermalControlService,FoundationService,dialogService) {
            $scope.$emit('navShow',2);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                sourceTypes: ["SHOWCAL", "PLADMIN"]
            };



            /**
             * 搜索用户列表
             */
            $scope.getList = function () {
                ThermalControlService.getSportSettingAllList( $scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.settingResult = data.result;
                        $scope.vm.settingTotalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip(msg);
                    }
                });
            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;
                $scope.getList();
            };
            $scope.doSearch();

            //新增
            $scope.addSportSetting = function (sportSetting) {
                $scope.sportSetting={};

                //复制
                angular.extend($scope.sportSetting ,sportSetting);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sportSettingEidt.html",
                    controller:SettingEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.sportSetting;
                        }
                    }
                });
            };

            //编辑
            $scope.edit = function (sportSetting) {
                $scope.sportSetting={};
                //复制
                angular.extend($scope.sportSetting ,sportSetting);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sportSettingEidt.html",
                    controller:SettingEidt,
                    size:"",
                    resolve: {
                        items: function () {
                            return $scope.sportSetting;
                        }
                    }
                });
                modalInstance.result.then(function (data){
                    window.location.reload();
                });
            };

            //删除
            $scope.delete = function(sportSetting) {
                var dialogDefaults = {
                    size:"sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除这条数据吗？",
                    type:"delete",
                    callback: function () {
                        ThermalControlService.deleteSportSetting({id:sportSetting.id}).success(function(data){
                            if(data.errors === null || data.errors.length > 0){
                                dialogService.tip(data.errors);
                            }else{
                                dialogService.tip([{"message":"删除成功！" }]);
                                window.location.reload();
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);
            };


            var SettingEidt = ["$scope","$modalInstance","items","ThermalControlService","dialogService",
                function ($scope, $modalInstance, items,ThermalControlService,dialogService) {
                    $scope.$emit('navShow',2);
                    $scope.sportSetting = items;
                    // $scope.sportSetting.title = "新增知识库";

                    $scope.sportSettingTypes = [
                        {sqlSave:'TEXT',name:'文字'},
                        {sqlSave:'PICTURE', name:'图片'},
                        {sqlSave:'VIDEO', name:'视频'},
                        {sqlSave:'URL', name:'链接'}
                    ];

                    $scope.attachmentRequest = {};
                    $scope.newId = {};
                    $scope.attachment = {
                        businessType: "EMPLOYEE",
                        businessCategory: "COMMON",
                        list: []
                    };
                    if( $scope.sportSetting.id==null){
                        FoundationService.apiFoundationIdGet().success(function (data) {
                            if (null == data.errors || 0 < data.errors.length)
                                dialogService.tip(data.errors);
                            else {
                                $scope.newId = data.id;
                                $scope.attachment.businessId=$scope.newId;
                            }
                        });
                    }
                    else{
                        $scope.attachment.businessId=$scope.sportSetting.id;
                    }
                    /* 用于存放附件的ID */
                    $scope.attachmentRequest = {ids: []};
                    for (var i = 0; i < $scope.attachment.list.length; i++) {
                        $scope.attachmentRequest.ids.push($scope.attachment.list[i].id);
                    }
                    /**
                     *图片保存的功能
                     */
                    $scope.showPicture = function () {
                        var fileId = document.getElementById("pictureFile");
                        fileId.onchange = function () {
                            var fileList = document.getElementById("pictureFile").files;
                            var file = fileList[0];
                            var fileReader = new FileReader();
                            fileReader.readAsDataURL(file);
                            //头像上传
                            FoundationService.uploadLogo(file).success(function (data) {
                                if (data.errors === null || data.errors.length > 0) {
                                    dialogService.tip(data.errors);
                                } else {
                                    $scope.sportSetting.cover = data.id;
                                    $scope.sportSetting.url = data.url;
                                }
                            });
                        };
                    };

                    $scope.doSave = function() {
                        if($scope.sportSetting.id == null){
                            //新建
                            $scope.sportSetting.id= $scope.newId;
                            ThermalControlService.createSportSetting($scope.sportSetting).success(function(data){
                                $scope.validateForm.$errors =[];
                                if(data.errors === null || data.errors.length > 0){
                                    for(var i=0;i<data.errors.length;i++){
                                        $scope.validateForm.$errors.push(data.errors[i].message);
                                    }
                                    $scope.sportSetting.id=null;
                                }else{
                                    //返回id
                                    $scope.sportSetting.id = data.id;
                                    dialogService.tip([{"message": "保存成功！"}]);
                                    //关闭
                                    $modalInstance.close($scope.sportSetting);
                                    //清空数据
                                    $scope.sportSetting={};
                                    window.location.reload();
                                }
                            }) ;
                        } else {
                            //编辑
                            ThermalControlService.updateSportSetting($scope.sportSetting).success(function(data){
                                $scope.validateForm.$errors =[];
                                if(data.errors === null || data.errors.length > 0){
                                    for(var i=0;i<data.errors.length;i++){
                                        $scope.validateForm.$errors.push(data.errors[i].message);
                                    }
                                }else{
                                    dialogService.tip([{"message": "保存成功！"}]);
                                    //关闭
                                    $modalInstance.close($scope.sportSetting);
                                    //清空数据
                                    $scope.sportSetting={};
                                }
                            }) ;
                        }
                    };

                    $scope.clean = function () {
                        $scope.disease = {};
                        $modalInstance.dismiss('cancel');
                    };
                }
            ];



        }
    ]);
    app.controller("SportSettingImportController", ["$scope", "$http", "$modal" ,  "$location","toolsService","ThermalControlService", "dialogService", function ($scope, $http, $modal, $location, toolsService,ThermalControlService, dialogService) {
        $scope.$emit('navShow',2);
        $scope.tabShow = toolsService.parameter("tabShow", $location.absUrl());
        $scope.errorOpen = function (errors, url) {
            $scope.result = {};
            $scope.result.errors = errors;
            $scope.result.url = url;
            var modalInstance = $modal.open({
                templateUrl: "errors.html",
                controller: ErrorController,
                resolve: {
                    items: function () {
                        return $scope.result;
                    }
                }
            });
            modalInstance.result.then(function () {
            }, function () {
            });
        };
        $scope.upFileClick=function(){
            var upImportFileId=document.getElementById("upImportFileId");
            upImportFileId.onchange=function(){
                var upImportFile;
                var upImportFileList =upImportFileId.files;
                var upImportFilename;
                if(upImportFileList){
                    upImportFile = upImportFileList[0];
                    upImportFilename=upImportFile.name;
                }else{
                    upImportFilename =upImportFileId.value;
                }
                var str =upImportFilename.substr(upImportFilename.indexOf(".")+1);
                if(!(str=="xls" || str=="xlsx" || str=="et")){
                    $("#upImportFile").val("");
                    dialogService.tip([{"message":"请上传Excel支持的文件(xls,xlsx,et等)！" }]);
                }else{
                    $("#upImportFile").val(upImportFilename);
                }
            };

        };
        $scope.upFileSave = function () {
            var file = document.getElementById("upImportFileId").files[0];
            ThermalControlService.apiSportSettingImport(file).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    if (data.errors.length > 10) {
                        data.errors = data.errors.slice(0, 9);
                    }
                    $scope.errorOpen(data.errors, data.url);
                } else {
                    dialogService.tip([
                        {"message": "导入成功！"}
                    ], "setting");
                }
            });
        };
        $scope.downloadTemplate = function () {
            ThermalControlService.apiSportSettingTemplate().success(function (data) {
                if (data.errors == null || data.errors.length > 0) {
                    $scope.errorOpen(data.errors, data.url);
                } else {
                    window.open(data.url, "_self");
                }
            });
        };
    }
    ]);
    var ErrorController = ["$scope", "$modalInstance", "items",
        function ($scope, $modalInstance, items) {
            //$scope.$emit('navShow', 3);
            $scope.errors = items.errors;
            $scope.url = items.url;
            $scope.download = function () {
                window.open($scope.url, "_self");
                $modalInstance.dismiss('cancel');
            };
            $scope.cancel = function () {
                $modalInstance.dismiss('cancel');
            };
            //关闭错误
            $scope.closeAlert = function (index, form) {
                form.splice(index, 1);
            };
        }];
})();
/**
 * Created by xiniu on 9/22 0022.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.usermanager", []);
    app.controller("UserManagerIndexController", ["$scope", "$http", "$modal", "PlatformService", "dialogService",
        function ($scope, $http, $modal, PlatformService, dialogService) {
            $scope.$emit('navShow', 4);
            //分页传入的数值
            $scope.vm = {
                pageNumber: 1,
                pageSize: 10,
                sourceTypes: ["REGISTER", "PLATFORM"]
            };
            $scope.pagedResult = [];
            $scope.userTypes = [
                {key: "USER", value: "用户", state: false},
                {key: "SHOWCAL", value: "瘦咖", state: false},
                {key: "PLADMIN", value: "平台管理员", state: false}
            ];
            $scope.sexs = [
                {key: "MALE", value: "男", state: false},
                {key: "FEMALE", value: "女", state: false}
            ];
            $scope.startDate = false;
            $scope.endDate = false;

            //弹出式日历触发函数
            $scope.openStartDate = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.startDate = true;
            };
            //弹出式日历触发函数
            $scope.openEndDate = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.endDate = true;
            };
            $scope.usertags = [];
            PlatformService.getSettingUserTagAllList({}).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.usertags = data.result;
                }
            });

            /**
             * 搜索用户列表
             */
            $scope.getList = function () {
                $scope.vm.usertags = [];
                if ($scope.vm.usertag) {
                    $scope.vm.usertags.push($scope.vm.usertag);
                }
                PlatformService.findSysUser($scope.vm).success(function (data) {
                    if (data.errors && data.errors.length === 0) {
                        $scope.pagedResult = data.result;
                        for (var i = 0; i < $scope.pagedResult.length; i++) {
                            $scope.pagedResult[i].check = false;
                        }
                        console.log($scope);
                        $scope.vm.totalCount = data.totalCount;
                    } else {
                        var msg = "由于以下原因，未能取得数据\n";
                        for (var i = 0; i < data.errors.length; i++) {
                            msg += (i + 1) + "." + data.errors[i].message + "\n";
                        }
                        dialogService.tip([{"message": msg}], null, 400);
                    }
                });
            };
            $scope.all = false;
            $scope.allBox = function () {
                $scope.all = !$scope.all;
                if ($scope.pagedResult.length > 0) {
                    for (var i = 0; i < $scope.pagedResult.length; i++) {
                        $scope.pagedResult[i].check = $scope.all;
                    }
                }
            };
            $scope.changeBox = function (index) {
                $scope.pagedResult[index].check = !$scope.pagedResult[index].check;
            };
            /**
             * 页面初始化加载数据
             */
            $scope.doSearch = function () {
                $scope.vm.pageNumber = 1;
                if ($scope.vm.usertypesObj) {
                    $scope.vm.usertypes = [];
                    for (var i = 0; i < $scope.vm.usertypesObj.list.length; i++) {
                        $scope.vm.usertypes.push($scope.vm.usertypesObj.list[i].key);
                    }
                }
                if ($scope.vm.sexsObj) {
                    $scope.vm.sexs = [];
                    for (var j = 0; j < $scope.vm.sexsObj.list.length; j++) {
                        $scope.vm.sexs.push($scope.vm.sexsObj.list[j].key);
                    }
                }

                if ($scope.vm.startDate instanceof Date) {
                    $scope.vm.startDate = $scope.vm.startDate.format("yyyy-MM-dd");
                }
                if ($scope.vm.endDate instanceof Date) {
                    $scope.vm.endDate = $scope.vm.endDate.format("yyyy-MM-dd");
                }
                /*if($scope.vm.usertag){
                 $scope.vm.usertags = [];
                 $scope.vm.usertags.push($scope.vm.usertag);
                 }*/
                $scope.getList();
            };
            $scope.doSearch();

            $scope.showcal=function(user){
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "showcaldetail.html",
                    size: "lg",
                    resolve: {
                        user: function () {
                            return user;
                        }
                    },
                    controller: showcalDetailController
                });
                modalInstance.result.then(function () {

                })
            };

            /**
             *  升级为瘦咖
             */
            $scope.toShowcal = function (id) {
                PlatformService.upSysUser({id: id}).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message": "成功升级为瘦咖！"}], "/platform/daily/usermanager");
                    }
                });
            };

            /**
             *  降级为会员
             */
            $scope.toUser = function (id) {
                PlatformService.downSysUser({id: id}).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message": "成功降级为会员！"}], "/platform/daily/usermanager");
                    }
                });
            };

            /**
             *  降级为会员
             */
            $scope.doDelete = function (id) {
                PlatformService.deleteSysUser({id: id}).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message": "成功删除！"}], "/platform/daily/usermanager");
                    }
                });
            };

            /**
             *  服务评价
             */
            $scope.comment = function (id) {
                // 弹出服务评价窗口
               var modalInstance = $modal.open({
                    templateUrl: "chooseComment.html",
                    size: "lg",
                    resolve: {
                        userId: function(){
                            return id;
                        }
                    },
                    controller: ChooseCommentController
                });
                modalInstance.result.then(function () {

                })
            };
            /**
             * 帖子推送弹框
             */
            $scope.pushArticle = function () {
                $scope.userIds = [];
                for (var i = 0; i < $scope.pagedResult.length; i++) {
                    if ($scope.pagedResult[i].check) {
                        $scope.userIds.push($scope.pagedResult[i].id);
                    }
                }
                if ($scope.userIds.length == 0) {
                    dialogService.tip([{"message": "请选择需要推送帖子的用户！"}], null);
                    return false;
                }
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "chooseArticle.html",
                    size: "lg",
                    resolve: {
                        userIds: function () {
                            return $scope.userIds;
                        }
                    },
                    controller: ChooseArticleController
                });
                modalInstance.result.then(function () {

                })
            };
            /**
             * 系统消息
             */
            $scope.sendMessage = function () {
                $scope.userIds = [];
                for (var i = 0; i < $scope.pagedResult.length; i++) {
                    if ($scope.pagedResult[i].check) {
                        $scope.userIds.push($scope.pagedResult[i].id);
                    }
                }
                if ($scope.userIds.length == 0) {
                    dialogService.tip([{"message": "请选择用户！"}], null);
                    return false;
                }
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "sendMessage.html",
                    size: "lg",
                    resolve: {
                        userIds: function () {
                            return $scope.userIds;
                        }
                    },
                    controller: SendMessageController
                });
                modalInstance.result.then(function () {

                })
            };
        }
    ]);
    //创建用户
    app.controller("UserManagerCreateController", ["$scope", "$http", "PlatformService", "FoundationService", "dialogService",
        function ($scope, $http, PlatformService, FoundationService, dialogService) {
            $scope.user = {sex: 'MALE'};
            $scope.userTypes = [
                {name: '普通用户', id: 'USER'},
                {name: '瘦咖', id: 'SHOWCAL'},
                {name: '平台管理员', id: 'PLADMIN'}
            ];
            //弹出式日历触发函数
            $scope.openData = function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                $scope.openedDate = true;
            };
            /**
             *图片保存的功能
             */
            $scope.showPicture = function () {
                var fileId = document.getElementById("pictureFile");
                fileId.onchange = function () {
                    var fileList = document.getElementById("pictureFile").files;
                    var file = fileList[0];
                    var fileReader = new FileReader();
                    fileReader.readAsDataURL(file);
                    //头像上传
                    FoundationService.uploadLogo(file).success(function (data) {
                        if (data.errors === null || data.errors.length > 0) {
                            dialogService.tip(data.errors);
                        } else {
                            $scope.user.avatarurl = data.url;
                            $scope.user.avatarId = data.id;
                        }
                    });
                };
            };


            $scope.doSave = function () {
                console.log($scope.user);
                if ($scope.user.birthday instanceof  Date) {
                    $scope.user.birthday = $scope.user.birthday.format('yyyy-MM-dd');
                }
                PlatformService.createSysUser($scope.user).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        dialogService.tip([{"message": "用户创建成功！"}], "/platform/daily/usermanager");
                    }
                })
            }
        }
    ]);
    var showcalDetailController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, PlatformService, user) {

        console.log(user);
        $scope.vm = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };
        $scope.user =  user
        var param = {
            userId:$scope.user.id,
            type:'WEIGHT'
        }
        $scope.firstWeight = 0;
        PlatformService.getSysUserCurveAllListbyUser(param).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors);
            } else {
                $scope.weights = data.result;
                if(data.result.length > 0){
                    $scope.firstWeight = data.result[0];
                }
                $scope.weighttotalCount = data.totalCount;
            }
        })

        $scope.vm.color="color-gray"
        $scope.weightshow=function(){
           $scope.weight=true;
           $scope.back=false;
           $scope.hip=false;
           $scope.cal=false;
           $scope.sporttime=false;
           $scope.sportconsume=false;
            if($scope.weight){
                $scope.vm.color="color-gray"
                $scope.vm.color1="";
                $scope.vm.color2="";
                $scope.vm.color3="";
                $scope.vm.color4="";
                $scope.vm.color5=""
            }
          // 查询数据
            var param = {
                userId:$scope.user.id,
                type:'WEIGHT'
            }
            PlatformService.getSysUserCurveAllListbyUser(param).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.weights = data.result;
                    $scope.weighttotalCount = data.totalCount;
                }
            })
        };

        $scope.backshow=function(){
           $scope.weight=false;
           $scope.back=true;
           $scope.hip=false;
           $scope.cal=false;
           $scope.sporttime=false;
           $scope.sportconsume=false;
            if($scope.back){
                $scope.vm.color1="color-gray";
                $scope.vm.color="";
                $scope.vm.color2="";
                $scope.vm.color3="";
                $scope.vm.color4="";
                $scope.vm.color5=""
            }
            var param = {
                userId:$scope.user.id,
                type:'WAISTLINE'
            }
            PlatformService.getSysUserCurveAllListbyUser(param).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.waistlines = data.result;
                    $scope.waistlineCount = data.totalCount;
                }
            })
        };

        $scope.hipshow=function(){
           $scope.weight=false;
           $scope.back=false;
           $scope.hip=true;
           $scope.cal=false;
           $scope.sporttime=false;
           $scope.sportconsume=false;
            if($scope.hip){
                $scope.vm.color2="color-gray";
                $scope.vm.color="";
                $scope.vm.color1="";
                $scope.vm.color3="";
                $scope.vm.color4="";
                $scope.vm.color5=""
            }
            var param = {
                userId:$scope.user.id,
                type:'HIPLINE'
            }
            PlatformService.getSysUserCurveAllListbyUser(param).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors);
                } else {
                    $scope.hiplines  = data.result;
                    $scope.hiplineCount = data.totalCount;
                }
            })
        };
        $scope.calshow=function(){
           $scope.weight=false;
           $scope.back=false;
           $scope.hip=false;
           $scope.cal=true;
           $scope.sporttime=false;
           $scope.sportconsume=false;
            if($scope.cal){
                $scope.vm.color3="color-gray";
                $scope.vm.color="";
                $scope.vm.color1="";
                $scope.vm.color2="";
                $scope.vm.color4="";
                $scope.vm.color5=""
            }
        };
        $scope.sporttimeshow=function(){
           $scope.weight=false;
           $scope.back=false;
           $scope.hip=false;
           $scope.cal=false;
           $scope.sporttime=true;
           $scope.sportconsume=false;
            if($scope.sporttime){
                $scope.vm.color4="color-gray";
                $scope.vm.color="";
                $scope.vm.color1="";
                $scope.vm.color2="";
                $scope.vm.color3="";
                $scope.vm.color5=""
            }
        };
        $scope.sportconsumeshow=function(){
           $scope.weight=false;
           $scope.back=false;
           $scope.hip=false;
           $scope.cal=false;
           $scope.sporttime=false;
           $scope.sportconsume=true;
            if($scope.sportconsume){
                $scope.vm.color5="color-gray";
                $scope.vm.color="";
                $scope.vm.color1="";
                $scope.vm.color2="";
                $scope.vm.color3="";
                $scope.vm.color4=""

            }
        };


    /*    PlatformService.findSysUser({id:userId}).success(function (data) {
            if (data.errors === null || data.errors.length > 0) {
                dialogService.tip(data.errors, null, null);
            } else {

              }
        });*/
        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };


    var ChooseArticleController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, CmsService, PlatformService, userIds) {
        $scope.articles = [];
        console.log(userIds);
        $scope.vm1 = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };
        $scope.getAllArticle = function () {
            CmsService.findArticle($scope.vm1).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.articles = data.result;
                    $scope.vm1.totalCount = data.totalCount;
                    for (var i = 0; i < $scope.articles.length; i++) {
                        $scope.articles[i].check = false;
                    }
                }
            })
        };
        $scope.getAllArticle();
        $scope.doFind = function () {
            $scope.getAllArticle();
        };
        $scope.allArticle = false;
        $scope.allArticleBox = function () {
            $scope.allArticle = !$scope.allArticle;
            if ($scope.articles.length > 0) {
                for (var i = 0; i < $scope.articles.length; i++) {
                    $scope.articles[i].check = $scope.allArticle;
                }
            }
        };
        $scope.changeArticleBox = function (index) {
            $scope.articles[index].check = !$scope.articles[index].check;
        };
        $scope.create = function () {
            $scope.articleIds = [];
            for (var i = 0; i < $scope.articles.length; i++) {
                if ($scope.articles[i].check) {
                    $scope.articleIds.push($scope.articles[i].id);
                }
            }
            if ($scope.articleIds.length == 0) {
                $scope.validateForm.$errors.push("请选择需要推送的帖子");
                return false;
            }
            $scope.pushArticles = [];
            for (var i = 0; i < userIds.length; i++) {
                for (var j = 0; j< $scope.articleIds.length; j++) {
                    $scope.pushArticle = {
                        businessType: "ARTICLE",
                        businessId: $scope.articleIds[j],
                        receiptId: userIds[i]
                    };
                    $scope.pushArticles.push($scope.pushArticle);
                }
            }
            $scope.message = {
                sysMessageCreateRequestList: $scope.pushArticles
            };
            PlatformService.createMessage($scope.message).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "推送成功！"}], null);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };
    var SendMessageController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, PlatformService, userIds) {
        $scope.content;
        $scope.title;
        console.log(userIds);
        $scope.userIds= [];
        $scope.sendMessages=[];
        $scope.send = function () {
            if($scope.content.length>15){
                $scope.title= $scope.content.substring(0,15);
            }
            else{
                $scope.title= $scope.content;
            }
            for (var i = 0; i < userIds.length; i++) {
                $scope.sendMessage = {
                    businessType: "SYSTEM",
                    receiptId: userIds[i],
                    messageTitle: $scope.title,
                    messageContent: $scope.content
                };
                $scope.sendMessages.push( $scope.sendMessage);
            }

            $scope.message = {
                sysMessageCreateRequestList: $scope.sendMessages
            };
            PlatformService.createMessage($scope.message).success(function (data) {
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "消息发送成功！"}], null);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });

        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };
    };

    var ChooseCommentController = function ($scope, $modalInstance, dialogService, $modal, toolsService, $location, CmsService, PlatformService, userId) {
        $scope.commentPosts = [];

        $scope.vm2 = {
            pageNumber: 1,
            pageSize: 10,
            totalCount: 0
        };

        // 关闭窗口
        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };

        $scope.changeCommentBox = function (index) {
            $scope.commentPosts[index].check = !$scope.commentPosts[index].check;
        };

        $scope.allCommentPost = false;
        $scope.allCommentBox = function(){
            $scope.allCommentPost = !$scope.allCommentPost;
            if($scope.commentPosts.length > 0){
                for(var i=0; i<$scope.commentPosts.length; i++){
                    $scope.commentPosts[i].check = $scope.allCommentPost;
                }
            }
        };

        $scope.delete = function(){
            $scope.commentPostIds = [];
            for(var i=0; i<$scope.commentPosts.length; i++){
                if($scope.commentPosts[i].check){
                    $scope.commentPostIds.push($scope.commentPosts[i].id);
                }
            }
            if($scope.commentPostIds.length == 0){
                return false;
            }
            PlatformService.deleteCommentPostBatch({ids:$scope.commentPostIds}).success(function(data){
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    dialogService.tip([{"message": "删除成功！"}], null);
                    $modalInstance.close();
                    $modalInstance.dismiss('cancel');
                }
            });
        };

        $scope.getAllComment = function(){
            PlatformService.findComment({threadId : userId}).success(function(data){
                if (data.errors === null || data.errors.length > 0) {
                    dialogService.tip(data.errors, null, null);
                } else {
                    $scope.commentPosts = data.result;
                    $scope.vm2.totalCount = data.totalCount;
                    for(var i=0; i<$scope.commentPosts.length; i++){
                        $scope.commentPosts[i].check = false;
                    }
                }
            });
        };

        $scope.getAllComment();
    };
})();
/**
 * Created by Administrator on 2015/9/22.
 */
(function () {
    "use strict";
    var app = angular.module("sc.pl.usertag", []);
    //index
    app.controller("UserTagIndexController", ["$scope", "$http", "$modal", "PlatformService", "dialogService",
        function ($scope, $http, $modal, PlatformService, dialogService) {
            $scope.$emit('navShow', 1);
            $scope.query = {};
            $scope.search = function(){
                PlatformService.getSettingUserTagAllList($scope.query).success(function (data) {
                    if (data.errors === null || data.errors.length > 0) {
                        dialogService.tip(data.errors);
                    } else {
                        $scope.usertags = data.result;
                        $scope.usertags.totalCount = data.totalCount;
                    }
                });
            }
            $scope.search();
            //树编辑
            $scope.edit = function (tree) {
                $scope.usertag = {};
                //复制
                angular.extend($scope.usertag, tree);

                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "treeEidt.html",
                    controller: TreeEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return $scope.usertag;
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    $scope.search();
                });
            };

            //新建树节点
            $scope.addTree = function (tree) {

                $scope.usertag = {};
                if (tree != null) {
                    $scope.usertag = {
                        parentusertag: usertag.name,
                        parentId: usertag.id
                    };
                } else {
                    $scope.usertag = {
                        parentusertag: "",
                        parentId: ""
                    };
                }
                //弹出窗口
                var modalInstance = $modal.open({
                    templateUrl: "treeEidt.html",
                    controller: TreeEidt,
                    size: "",
                    resolve: {
                        items: function () {
                            return $scope.usertag;
                        }
                    }
                });
                modalInstance.result.then(function (data) {
                    $scope.search()
                });
            };
            $scope.delete = function (tree) {
                var dialogDefaults = {
                    size: "sm"
                };
                var dialogOptions = {
                    closeButtonText: "取消",
                    actionButtonText: "确定删除",
                    headerText: "温馨提示",
                    bodyText: "您确定要删除该标签吗？",
                    type: "delete",
                    callback: function () {
                        PlatformService.deleteSettingUserTag({id: tree.id}).success(function (data) {
                            if (data.errors === null || data.errors.length > 0) {
                                dialogService.tip(data.errors);
                            } else {
                                $scope.search();
                                dialogService.tip([
                                    {"message": "删除成功！" }
                                ]);
                            }
                        });
                    }
                };
                dialogService.confirm(dialogDefaults, dialogOptions);
            };
        }]);

    var TreeEidt = ["$scope", "$modalInstance", "items", "PlatformService", "dialogService",
        function ($scope, $modalInstance, items, PlatformService, dialogService) {
            $scope.$emit('navShow', 3);
            // console.log($scope);    $scope.org = items;
            $scope.usertag = items;
            if ($scope.usertag.id == null) {
                if ($scope.usertag.parentId == "") {
                    $scope.usertag.title = "增加用户标签";
                } else {
                    $scope.usertag.title = $scope.usertag.parentusertag + "新增子组织";
                }

            } else {
                $scope.usertag.title = "编辑用户标签";
            }
            $scope.doSave = function () {
                $scope.usertag.tagRgb=document.getElementById("nowColor").value;
                console.log($scope.usertag);
                if ($scope.usertag.id == null) {
                    //新建
                    PlatformService.createSettingUserTag($scope.usertag).success(function (data) {
                        $scope.validateForm.$errors = [];
                        if (data.errors === null || data.errors.length > 0) {
                            for(var i=0;i<data.errors.length;i++){
                                $scope.validateForm.$errors.push(data.errors[i].message);
                            }
                        } else {
                            //返回id
                            $scope.usertag.id = data.id;
                            dialogService.tip([
                                {"message": "保存成功！"}
                            ]);
                            //关闭
                            $modalInstance.close($scope.usertag);
                            //清空数据
                            $scope.usertag = {};

                            if(document.getElementById("colorBoard")){
                                document.body.removeChild(document.getElementById("colorBoard"));
                            }
                        }
                    });
                } else {
                    //编辑
                    $scope.usertag.tagRgb=document.getElementById("nowColor").value;
                    PlatformService.updateSettingUserTag($scope.usertag).success(function (data) {
                        $scope.validateForm.$errors = [];
                        if (data.errors === null || data.errors.length > 0) {
                            for(var i=0;i<data.errors.length;i++){
                                $scope.validateForm.$errors.push(data.errors[i].message);
                            }
                        } else {
                            dialogService.tip([
                                {"message": "保存成功！"}
                            ]);
                            //关闭
                            $modalInstance.close($scope.usertag);
                            //清空数据
                            $scope.usertag = {};

                            if(document.getElementById("colorBoard")){
                                document.body.removeChild(document.getElementById("colorBoard"));
                            }
                        }
                    });
                }

            };
            $scope.clean = function () {
                $scope.usertag = {};
                $modalInstance.dismiss('cancel');
                if(document.getElementById("colorBoard")){
                    document.body.removeChild(document.getElementById("colorBoard"));
                }
            };

            $scope.closeAlert = function (index, form) {
                form.splice(index, 1);
            };
        }];

})();